<?php
/**
 * @file
 * UCMS Search feature.
 *
 * @todo
 *   OK - Use the bulk API whenever possible
 *   OK - Decoralate node index on cron and node index now
 *   OK - Investigate if index without delay is possible (node_insert via ui)
 *   - Fix node delete from index
 *   - Add flexible schema (configurable dependent on fields)
 *   - Allow multiple facet widgets
 *   - Add checkbox based facet
 *   - Add sort widgets
 *   OK - Add drush integration
 *   - Decoralate Lucene query builder and Lucene query string formatting
 *   - Add Elastic search array query formatting (must, must not, etc...)
 */

/**
 * Public index name.
 *
 * FIXME: Ugly define/variable_get
 */
define('UCMS_SEARCH_INDEX_PUBLIC', variable_get('ucms_search_elastic_index_front', 'node_public'));

/**
 * Backoffice index name.
 *
 * FIXME: Ugly define/variable_get
 */
define('UCMS_SEARCH_INDEX_BACK', variable_get('ucms_search_elastic_index_back', 'node_backoffice'));

/**
 * Default number of items index each cron run.
 *
 * FIXME: Ugly define/variable_get
 */
define('UCMS_SEARCH_CRON_INDEX_LIMIT', variable_get('ucms_search_elastic_index_limit', 500));

/**
 * Default number of items index each cron run.
 */
define('UCMS_SEARCH_ELASTIC_DEBUG', variable_get('ucms_search_elastic_debug', true));

/**
 * Default search per page limit.
 */
const UCMS_SEARCH_LIMIT = 100;

/**
 * Cache key: index list.
 */
const UCMS_SEARCH_CACHE_INDEX_LIST = 'ucms_search_index_list';

/**
 * Index operations.
 */
require_once __DIR__ . '/ucms_search.index.inc';

/**
 * ÂµSync integration.
 */
require_once __DIR__ . '/ucms_search.usync.inc';

/**
 * Implements hook_boot().
 */
function ucms_search_boot() {
  if (!module_exists('composer_manager')) {
    if (!@include_once __DIR__ . '/../vendor/autoload.php') {
      watchdog(__FUNCTION__, "Missing composer autoload.php file", [], WATCHDOG_ERROR);
    }
  }
}

/**
 * Implements hook_menu().
 */
function ucms_search_menu() {
  $items = [];

  $items['admin/config/search/indices'] = [
    'title'             => "Search indices",
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_search_admin_index_form'],
    'access arguments'  => ['administer nodes'],
    'description'       => "Manage search indices.",
    'file'              => 'ucms_search.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/config/search/indices/%ucms_search_index'] = [
    'title callback'    => 'ucms_search_index_title',
    'title arguments'   => [4],
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_search_admin_index_mapping_form', 4],
    'access arguments'  => ['administer nodes'],
    'file'              => 'ucms_search.admin.inc',
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/config/search/indices/%ucms_search_index/mapping'] = [
    'title'             => "Mapping",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/search/indices/%ucms_search_index/mapping/add'] = [
    'title'             => "Add field",
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_search_admin_index_mapping_add_field_form', 4],
    'access arguments'  => ['administer nodes'],
    'file'              => 'ucms_search.admin.inc',
    'type'              => MENU_LOCAL_ACTION,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function ucms_search_theme() {
  return [
    'ucms_search_facet' => [
      'variables' => ['facet' => null],
    ],
  ];
}

/**
 * Menu helper.
 *
 * @param string $index
 *
 * @return string
 *  Index key if exists.
 */
function ucms_search_index_load($index) {
  if (array_key_exists($index, ucms_search_index_list())) {
    return $index;
  }
  return false;
}

/**
 * Menu helper.
 *
 * @param string $index
 *
 * @return string
 *  Index name if exists.
 */
function ucms_search_index_title($index) {
  $list = ucms_search_index_list();
  if (array_key_exists($index, $list)) {
    return $list[$index];
  }
  return false;
}

/**
 * Get elastic search client.
 *
 * @return \Elasticsearch\Client
 */
function ucms_search_client_get() {
  $instance = &drupal_static(__FUNCTION__);
  if (!$instance) {
    $hosts = variable_get('ucms_search_elastic_hosts', 'localhost:9200');
    if (!is_array($hosts)) {
      $hosts = [$hosts];
    }
    $instance = \Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
  }
  return $instance;
}

/**
 * Create new search
 *
 * @param string $index
 *
 * @return \Ucms\Search\QueryAlteredSearch
 */
function ucms_search_create($index) {
  return (new \Ucms\Search\QueryAlteredSearch(ucms_search_client_get()))->setIndex($index);
}

/**
 * Index or upsert a node into all matching indices.
 *
 * @param stdClass $node
 */
function ucms_search_node_index_now($node) {
  foreach (array_keys(ucms_search_index_list()) as $index) {
    ucms_search_index_node_index($index, $node, false, true);
  }
}

/**
 * Enqueue node to reindex.
 *
 * @param int|int[] $nidList
 */
function ucms_search_node_index_queue($nidList) {
  // FIXME see comment in ucms_search_exit().
  if (!is_array($nidList)) {
    $nidList = [$nidList];
  }
  $queue = &drupal_static('ucms_search_node_queue', []);
  $queue = array_merge($queue, $nidList);
  $queue = array_unique($queue);
}

/**
 * Implements hook_exit().
 */
function ucms_search_exit() {
  // FIXME The queue should be persistent in order to avoid loosing data
  // in case of PHP crash or any other bugguy reason.
  $queue = &drupal_static('ucms_search_node_queue');
  if ($queue) {
    foreach (array_keys(ucms_search_index_list()) as $index) {
      ucms_search_index_reindex($index, $queue);
    }
    drupal_static_reset('ucms_search_node_queue');
  }
}

/**
 * Get type registry.
 *
 * @return \Ucms\Search\Mapping\TypeRegistry
 */
function ucms_search_type_registry_get() {
  $instance = &drupal_static(__FUNCTION__);
  if (!$instance) {
    $types = module_invoke_all('ucms_search_type_registry');
    drupal_alter('ucms_search_type_registry', $types);
    $instance = (new \Ucms\Search\Mapping\TypeRegistry())->register($types);
  }
  return $instance;
}

/**
 * Implements hook_ucms_search_type_registry().
 */
function ucms_search_ucms_search_type_registry() {
  return [
    'date'    => '\Ucms\Search\Mapping\DateType',
    'integer' => '\Ucms\Search\Mapping\IntegerType',
    'long'    => '\Ucms\Search\Mapping\LongType',
    'string'  => '\Ucms\Search\Mapping\StringType',
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ucms_search_form_node_form_alter(&$form, &$form_state) {
  // If a node is modified from the node form, we must index it right now
  // so that when the user returns on the node admin pages, he'll see nodes
  // right away. This must be an opt-in behavior, false by default, in order
  // to avoid any batch updating nodes from triggering this once per node.
  // Also this will trigger the 'refresh' elastic option to be true at index
  // time, which may cause performance problems on the shard if you do it too
  // much on certain indices.
  $form['ucms_index_now'] = ['#type' => 'value', '#value' => true];
}

/**
 * Implements hook_node_insert().
 */
function ucms_search_node_insert($node) {
  // @see ucms_search_form_node_form_alter().
  if (isset($node->ucms_index_now) && $node->ucms_index_now) {
    ucms_search_node_index_now($node);
  } else {
    ucms_search_node_index_queue([$node->nid]);
  }
}

/**
 * Implements hook_node_update().
 */
function ucms_search_node_update($node) {
  // @see ucms_search_form_node_form_alter().
  if (isset($node->ucms_index_now) && $node->ucms_index_now) {
    ucms_search_node_index_now($node);
  } else {
    ucms_search_node_index_queue([$node->nid]);
  }
}

/**
 * Implements hook_node_delete().
 */
function ucms_search_node_delete($node) {
  // @todo Later queue and bulk
  foreach (array_keys(ucms_search_index_list()) as $index) {
    ucms_search_index_node_delete($index, $node);
  }
}

/**
 * Implements hook_ucms_search_index_reindex().
 */
function ucms_search_ucms_search_index_reindex($index, SelectQueryInterface $query) {
  switch ($index) {

    case UCMS_SEARCH_INDEX_PUBLIC:
      $query->condition('n.status', 1);
      break;
  }
}

/**
 * Implements hook_ucms_search_index_node().
 */
function ucms_search_ucms_search_index_node($index, $node) {
  switch ($index) {

    case UCMS_SEARCH_INDEX_PUBLIC:
      if ($node->status) {
        return true;
      }
      break;

    case UCMS_SEARCH_INDEX_BACK:
      return true;
  }
}

/**
 * Implements hook_cron().
 */
function ucms_search_cron() {
  foreach (array_keys(ucms_search_index_list()) as $index) {
    ucms_search_index_dequeue_bulk($index);
  }
}

/**
 * Renders a search facet.
 */
function theme_ucms_search_facet($variables) {
  $facet = $variables['facet'];

  // @todo Improve this
  if ($facet instanceof \Ucms\Search\Aggs\TermFacet) {

    $links    = [];
    $field    = $facet->getField();
    $values   = $facet->getSelectedValues();
    $choices  = $facet->getFormattedChoices();

    if (empty($choices)) {
      // There is no choice for this field.
      $links['_empty'] = [
        'title'       => t("No values"),
        'href'        => current_path(),
        'query'       => drupal_get_query_parameters(null, ['q', 'page']),
        'html'        => true,
        'attributes'  => ['class' => ['disabled']],
        // Forces the l() function to skip the 'active' class.
        'language'    => (object)['language' => LANGUAGE_NONE],
      ];

    } else if (1 === count($choices)) {
      // There is only one choice, and it might or might not be selected.
      foreach ($choices as $value => $string) {
        if (in_array($value, $values)) {
          $links[$value] = [
            'title'       => $string,
            'href'        => current_path(),
            'query'       => drupal_get_query_parameters(null, [$field, 'q', 'page']),
            'html'        => true,
            'attributes'  => ['class' => ['active']],
          ];
        } else {
          $links['_empty'] = [
            'title'       => $string,
            'href'        => current_path(),
            'query'       => [$field => $value] + drupal_get_query_parameters(null, ['q', 'page']),
            'html'        => true,
            'attributes'  => ['class' => ['disabled']],
            // Forces the l() function to skip the 'active' class.
            'language'    => (object)['language' => LANGUAGE_NONE],
          ];
        }
      }

    } else {
      // There is more than once choice, some might be selected.
      foreach ($choices as $value => $string) {
        if (in_array($value, $values)) {
          $links[$value] = [
            'title'       => $string,
            'href'        => current_path(),
            'query'       => drupal_get_query_parameters(null, [$field, 'q', 'page']),
            'html'        => true,
            'attributes'  => ['class' => ['active']],
          ];
        } else {
          $links[$value] = [
            'title'       => $string,
            'href'        => current_path(),
            'query'       => [$field => $value] + drupal_get_query_parameters(null, ['q', 'page']),
            'html'        => true,
            'attributes'  => [],
            // Forces the l() function to skip the 'active' class.
            'language'    => (object)['language' => LANGUAGE_NONE],
          ];
        }
      }
    }

    return theme('links__ucms_search_facet_terms', ['heading' => $facet->getTitle(), 'links' => $links]);
  }
}
