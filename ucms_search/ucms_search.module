<?php

/**
 * Public index name.
 */
define('UCMS_SEARCH_INDEX_PUBLIC', variable_get('ucms_search_elastic_index_front', 'node_public'));

/**
 * Backoffice index name.
 */
define('UCMS_SEARCH_INDEX_BACK', variable_get('ucms_search_elastic_index_back', 'node_backoffice'));

/**
 * Default search per page limit.
 */
const UCMS_SEARCH_LIMIT = 100;

/**
 * Default number of items index each cron run.
 */
const UCMS_SEARCH_CRON_INDEX_LIMIT = 250;

/**
 * Hopefully, you did run composer install.
 */
require_once __DIR__ . '/vendor/autoload.php';

/**
 * Index operations.
 */
require_once __DIR__ . '/ucms_search.index.inc';

/**
 * Implements hook_menu().
 */
function ucms_search_menu() {
  $items = [];

  $items['admin/config/search/indices'] = [
    'title'             => "Search indices",
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_search_admin_index_form'],
    'access arguments'  => ['administer nodes'],
    'description'       => "Manage search indices.",
    'file'              => 'ucms_search.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function ucms_search_theme() {
  return [
    'ucms_search_facet' => [
      'variables' => ['facet' => null],
    ],
  ];
}

/**
 * Create query.
 *
 * @return \Ucms\Search\Query
 */
function ucms_search_query_create() {
  return new \Ucms\Search\Query();
}

/**
 * Get elastic search client.
 *
 * @return \Elasticsearch\Client
 */
function ucms_search_client_get() {
  $instance = &drupal_static(__FUNCTION__);
  if (!$instance) {
    $hosts = variable_get('ucms_search_elastic_hosts', 'localhost:9200');
    if (!is_array($hosts)) {
      $hosts = [$hosts];
    }
    $instance = \Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
  }
  return $instance;
}

/**
 * Create new search
 *
 * @param string $index
 *
 * @return \Ucms\Search\Search
 */
function ucms_search_create($index) {
  return (new \Ucms\Search\Search(ucms_search_client_get()))->setIndex($index);
}

/**
 * Implements hook_ucms_search_index_reindex().
 */
function ucms_search_ucms_search_index_reindex($index, SelectQueryInterface $query) {
  switch ($index) {

    case UCMS_SEARCH_INDEX_PUBLIC:
      $query->condition('n.status', 1);
      break;
  }
}

/**
 * Enqueue node to reindex.
 *
 * @param int|int[] $nidList
 */
function ucms_search_node_index_queue($nidList) {
  if (!is_array($nidList)) {
    $nidList = [$nidList];
  }
  $queue = &drupal_static('ucms_search_node_queue', []);
  $queue = array_merge($queue, $nidList);
  $queue = array_unique($queue);
}

/**
 * Implements hook_exit().
 */
function ucms_search_exit() {
  $queue = &drupal_static('ucms_search_node_queue');
  if ($queue) {
    foreach ([UCMS_SEARCH_INDEX_PUBLIC, UCMS_SEARCH_INDEX_BACK] as $index) {
      ucms_search_index_reindex($index, $queue);
    }
    drupal_static_reset('ucms_search_node_queue');
  }
}

/**
 * Implements hook_node_insert().
 */
function ucms_search_node_insert($node) {
  ucms_search_node_index_queue([$node->nid]);
}

/**
 * Implements hook_node_update().
 */
function ucms_search_node_update($node) {
  ucms_search_node_index_queue([$node->nid]);
}

/**
 * Implements hook_node_delete().
 */
function ucms_search_node_delete($node) {
  // @todo Later queue and bulk
  foreach ([UCMS_SEARCH_INDEX_PUBLIC, UCMS_SEARCH_INDEX_BACK] as $index) {
    ucms_search_index_node_delete($index, $node);
  }
}

/**
 * Implements hook_cron().
 */
function ucms_search_cron() {
  foreach ([UCMS_SEARCH_INDEX_PUBLIC, UCMS_SEARCH_INDEX_BACK] as $index) {
    ucms_search_cron_index_dequeue($index);
  }
}

/**
 * Renders a search facet.
 */
function theme_ucms_search_facet($variables) {
  $facet = $variables['facet'];

  // @todo Improve this
  if ($facet instanceof \Ucms\Search\TermFacet) {

    $links    = [];
    $field    = $facet->getField();
    $values   = $facet->getSelectedValues();
    $choices  = $facet->getFormattedChoices();

    if (empty($choices)) {
      // There is no choice for this field.
      $links['_empty'] = t("No values");

    } else if (1 === count($choices)) {
      // There is only one choice, and it might or might not be selected.
      foreach ($choices as $value => $string) {
        if (in_array($value, $values)) {
          $links[$value] = l('- ' . $string, current_path(), [
            'query' => drupal_get_query_parameters(null, [$field, 'q']),
            'html'  => true,
          ]);
        } else {
          $links[$value] = $string;
        }
      }

    } else {
      // There is more than once choice, some might be selected.
      foreach ($choices as $value => $string) {
        if (in_array($value, $values)) {
          $links[$value] = l('- ' . $string, current_path(), [
            'query' => drupal_get_query_parameters(null, [$field, 'q']),
            'html'  => true,
          ]);
        } else {
          $links[$value] = l($string, current_path(), [
            'query' => [$field => $value] + drupal_get_query_parameters(),
            'html'  => true,
          ]);
        }
      }
    }

    return theme('item_list__ucms_search_facet_terms', ['title' => $facet->getTitle(), 'items' => $links]);
  }
}
