<?php
/**
 * @file
 * UCMS - Layout management module.
 *
 * For the sake of consistency, layouts cannot be nodes, otherwise layouts
 * could be embeded into layouts, which would make a serious and non human
 * comprehensible layout-ception. Problem with this model is that we need
 * to implement by ourselves the access API for layouts, but this is the
 * only custom access API that will be implemented at all.
 *
 * @todo
 *   - better AJAX/REST requests handling
 *   - more detailed data structure (options, status)
 *   - alteration for access checks
 *   - preview mode (display unauthorized or unpublished content)
 *   - non AJAX edit forms for accessibility
 *   - regions filtering (per-theme global configuration) and checks
 *   - unit testing (sorry should have done that earlier).
 */

use MakinaCorpus\Ucms\Layout\Context;
use MakinaCorpus\Ucms\Layout\Item;
use MakinaCorpus\Ucms\Layout\Layout;

/**
 * Implements hook_menu().
 */
function ucms_layout_menu() {
  $items = [];

  // This is what the site is made for.
  $items['layout/%ucms_layout_temporary'] = [
    'title callback'    => 'ucms_layout_title',
    'title arguments'   => [1],
    'page callback'     => 'ucms_layout_blank',
    'page arguments'    => [1],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['view', 1],
    'type'              => MENU_CALLBACK,
  ];

  // Update and delete operations.
  $items['layout/%ucms_layout/edit'] = [
    'title'             => "Edit page",
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_layout_admin_layout_edit_form', 1],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 1],
    'file'              => 'ucms_layout.pages.inc',
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['layout/%ucms_layout/delete'] = [
    'title callback'    => 'ucms_layout_title',
    'title arguments'   => [1],
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_layout_admin_layout_delete_form', 1],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['delete', 1],
    'file'              => 'ucms_layout.pages.inc',
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // Administration section.
  $items['admin/layout'] = [
    'title'             => "Page building",
    'page callback'     => 'ucms_layout_admin_index',
    'access arguments'  => ['access ucms content overview'],
    'file'              => 'ucms_layout.pages.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/layout/add'] = [
    'title'             => 'Add page',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_layout_admin_layout_add_form', 1],
    'access arguments'  => ['create layout'],
    'file'              => 'ucms_layout.pages.inc',
    'type'              => MENU_LOCAL_ACTION,
  ];

  // Structure related configuration for administrator.
  $items['admin/structure/layout'] = [
    'title'             => "Layout management",
    'description'       => "Manage usable regions layouts and site wide configuration.",
    'page callback'     => 'ucms_layout_admin_structure',
    'access arguments'  => ['administer content types'],
    'file'              => 'ucms_layout.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/structure/layout/%ucms_layout_theme'] = [
    'title callback'    => 'ucms_layout_theme_title',
    'title arguments'   => [3],
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_layout_admin_structure_theme_form', 3],
    'access arguments'  => ['administer content types'],
    'file'              => 'ucms_layout.admin.inc',
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // AJAX endpoints.
  $items['admin/ucms/layout/%ucms_layout_temporary/add'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_add',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/ucms/layout/%ucms_layout_temporary/remove'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_remove',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/ucms/layout/%ucms_layout_temporary/move'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_move',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Menu helper: ensures a theme exist
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   Theme name if exists and enabled, false otherwise.
 */
function ucms_layout_theme_load($theme) {
  $themes = system_list('theme');

  return (isset($themes[$theme]) && $themes[$theme]->status) ? $theme : false;
}

/**
 * Menu helper.
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   The theme edit page title.
 */
function ucms_layout_theme_title($theme) {
  $themes = system_list('theme');

  if (isset($themes[$theme])) {
    return t("Edit @theme theme regions", ['@theme' => $themes[$theme]->info['name']]);
  }

  return t("Edit theme regions");
}

/**
 * Get enabled regions for the given theme.
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string[]
 *   Keys are region names, values region names.
 */
function ucms_layout_theme_region_list($theme) {
  $regions = variable_get('ucms_layout_regions_' . $theme);
  if (null === $regions) {
    $regions = array_keys(system_region_list($theme));
  }
  return drupal_map_assoc($regions);
}

/**
 * Implements hook_admin_paths().
 */
function ucms_layout_admin_paths() {
  return [
    'layout/*/*' => true,
  ];
}

/**
 * Implements hook_permission().
 */
function ucms_layout_permission() {
  return [
    'create layout' => [
      'title' => t("Create a layout"),
    ],
    'update own layout' => [
      'title' => t("Update own layout"),
    ],
    'delete own layout' => [
      'title' => t("Delete own layout"),
    ],
    'update any layout' => [
      'title' => t("Update any layout"),
    ],
    'delete any layout' => [
      'title' => t("Delete any layout"),
    ],
  ];
}

/**
 * Layout access.
 *
 * @param string $op
 *   May be 'view', 'update' or 'delete'.
 * @param int|Layout $id
 *   Layout object or identifier.
 * @param stdClass $acount
 *   The account to check.
 *
 * @return boolean
 */
function ucms_layout_access($op, $layout, $account = null) {

  if (!$account) {
    $account = $GLOBALS['user'];
  }

  if (!$layout instanceof Layout) {
    $layout = ucms_layout_load($layout);
    if (!$layout) { // Is not a layout.
      return false;
    }
  }

  switch ($op) {

    case 'view':
      return user_access('access content', $account);

    case 'update':
      if (user_access('update any layout', $account)) {
        return true;
      }
      if (user_access('update own layout') && $account->uid == $layout->getId()) {
        return true;
      }
      return false;;

    case 'delete':
      if (user_access('delete any layout', $account)) {
        return true;
      }
      if (user_access('delete own layout') && $account->uid == $layout->getId()) {
        return true;
      }
      return false;;

    default:
      return false;
  }
}

/**
 * Menu helper: load layout instance.
 */
function ucms_layout_load($id) {
  return ucms_layout_context_get()->getStorage()->load($id);
}

/**
 * Menu helper: load layout instance in potential temporary context.
 */
function ucms_layout_temporary_load($id) {

  $token      = null;
  $context    = ucms_layout_context_get();

  if (isset($_GET['edit']) && drupal_valid_token($_GET['edit'])) {
    $token = $_GET['edit'];
  } else if ('POST' === $_SERVER['REQUEST_METHOD'] && isset($_POST['token']) && drupal_valid_token($_POST['token'])) {
    $token = $_POST['token'];
  }

  if ($token) {
    $context->setToken($token);
  }

  if ($layout = $context->getStorage()->load($id)) {
    $context->setCurrentLayout($layout);
    if ($token) {
      drupal_add_js(['ucmsLayout' => [
        'editToken' => $token,
        'layoutId' => $layout->getId(),
      ]], 'setting');
    }
    return $layout;

  } else {
    // Wrong! Temporary but no context.
    $context->setToken(null);
  }

  return false;
}

/**
 * Menu title callback.
 */
function ucms_layout_title($layout) {
  if ($layout instanceof Layout) {
    return $layout->getTitle();
  }
  return t("Layout");
}

/**
 * Get current contextual layout.
 *
 * @return Context
 */
function ucms_layout_context_get() {
  $instance = &drupal_static(__FUNCTION__);
  if (!$instance) {
    $instance = new Context();
  }
  return $instance;
}

/**
 * Implements hook_theme().
 */
function ucms_layout_theme() {
  return [
    'ucms_layout_item' => [
      'variables' => ['nid' => null, 'node' => null, 'view_mode' => 'teaser'],
      'template'  => 'ucms-layout-item',
    ],
    'ucms_layout_region' => [
      'variables' => ['items' => [], 'name' => 'content'],
      'template'  => 'ucms-layout-region',
    ],
  ];
}

/**
 * Implements hook_form().
 */
function ucms_layout_forms($form_id, $args) {
  // This implementation allows to use the same form more than once on the
  // same page, see drupal_get_form() related calls. This is ugly but this
  // is the right way to do it.
  if (0 === strpos($form_id, 'ucms_layout_edit_form')) {
    return [$form_id => ['callback' => 'ucms_layout_edit_form']];
  }
}

/**
 * Implements hook_block_list_alter().
 */
function ucms_layout_block_list_alter(&$blocks) {
  global $theme_key;

  $enabled = ucms_layout_theme_region_list($theme_key);

  foreach (array_keys(system_region_list($theme_key)) as $region) {

    if (empty($enabled[$region])) {
      continue; // Region is disabled by config.
    }

    if (empty($blocks)) { // If empty max() throws a PHP warning.
      $next_key = 666;
    } else {
      $next_key = max(array_keys($blocks)) + 1;
    }

    $blocks[$next_key] = (object) [
      'bid' => $next_key,
      'cache' => 0,
      'custom' => 0,
      'delta' => $theme_key . ':' . $region,
      'module' => 'ucms_layout',
      'pages' => '',
      'region' => $region,
      'status' => 1,
      'title' => '',
      'visibility' => 0,
      'weight' => 0,
    ];
  }
}

/**
 * Implements hook_block_info().
 */
function ucms_layout_block_view($delta = '') {
  global $theme;

  if (!strpos($delta, ':')) {
    return; // Invalid delta.
  }

  $context  = ucms_layout_context_get();
  $layout   = $context->getCurrentLayout();
  $editMode = $context->isTemporary();

  if (!$layout instanceof Layout) {
    return; // No layout on page.
  }

  list($btheme, $region) = explode(':', $delta, 2);
  if (!$btheme) {
    return; // No theme set.
  }
  if (!$region) {
    return; // No region set.
  }
  if ($btheme !== $theme) {
    return; // Wrong theme.
  }

  $items  = [];
  $region = $layout->getRegion($region);

  // Preload all nodes for performance.
  $nodeIdList = $region->getAllNodeIds();

  if ($nodeIdList) {
    $map = node_load_multiple($nodeIdList);

    $map = array_filter($map, function ($node) {
      return node_access('view', $node);
    });

    if (empty($map) && !$editMode) {
      return;
    }

    /* @var $item Item */
    foreach ($region as $item) {
      $nid = $item->getNodeId();
      if (isset($map[$nid])) {
        $items[] = [
          '#theme'      => 'ucms_layout_item',
          '#nid'        => $item->getNodeId(),
          '#node'       => $map[$nid],
          '#view_mode'  => $item->getViewMode(),
        ];
      }
    }
  } else if (!$editMode) {
    return;
  }

  if (empty($items)) {
    // Trick block.module so that it's not "empty"
    $items = ['#markup' => ''];
  }

  return ['content' => $items];
}

/**
 * Implements hook_preprocess_block().
 */
function ucms_layout_preprocess_block(&$vars) {
  // Add attributes and classes to block
  $block = $vars['block'];
  if ($block->module == 'ucms_layout') {
    $vars['attributes_array']['data-region'] = $block->region;
    if (!empty($vars['elements']['#type'])) {
      $vars['classes_array'][] = 'ucms-layout-empty-block';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ucms_layout_preprocess_region(&$vars) {
  // Lookup for all blocks, if these are only ucms empty block, add class
  $empty = TRUE;
  foreach (element_children($vars['elements']) as $delta) {
    $block = $vars['elements'][$delta];
    if (!isset($block['#block']) || $block['#block']->module != 'ucms_layout' || empty($block['#type'])) {
      $empty = FALSE;
    }
  }
  if ($empty) {
    $vars['classes_array'][] = 'ucms-layout-empty-region';
  }
}

/**
 * Edit form.
 */
function ucms_layout_edit_form($form, &$form_state) {

  $context  = ucms_layout_context_get();
  $layout   = $context->getCurrentLayout();

  if ($layout instanceof Layout) {
    if ($context->isTemporary()) {

      $form['actions']['#type'] = 'actions';
      $form['actions']['save'] = [
        '#type'   => 'submit',
        '#value'  => t("Save"),
        '#submit' => ['ucms_layout_edit_form_save_submit']
      ];
      $form['actions']['cancel'] = [
        '#type'   => 'submit',
        '#value'  => t("Cancel"),
        '#submit' => ['ucms_layout_edit_form_cancel_submit']
      ];

    } else {
      $form['actions']['#type'] = 'actions';
      $form['actions']['edit'] = [
        '#type'   => 'submit',
        '#value'  => t("Edit"),
        '#submit' => ['ucms_layout_edit_form_edit_submit']
      ];
    }
  }

  return $form;
}

/**
 * Edit form 'edit' button submit.
 */
function ucms_layout_edit_form_edit_submit($form, &$form_state) {
  $context = ucms_layout_context_get();
  if (!$context->isTemporary()) {
    // @todo Generate a better token (random).
    $token = drupal_get_token();
    $layout = $context->getCurrentLayout();
    $context->setToken($token);
    // Saving the layout will force it be saved in the temporary storage.
    $context->getStorage()->save($layout);
    $form_state['redirect'] = [
      current_path(),
      ['query' => ['edit' => $token] + drupal_get_query_parameters()]
    ];
  }
}

/**
 * Edit form 'save' button submit.
 */
function ucms_layout_edit_form_save_submit($form, &$form_state) {
  $context = ucms_layout_context_get();
  if ($context->isTemporary()) {
    $context->commit();
    drupal_set_message(t("Changed have been saved"));
    $form_state['redirect'] = [
      current_path(),
      ['query' => drupal_get_query_parameters(null, ['q', 'edit'])]
    ];
  }
}

/**
 * Edit form 'cancel' button submit.
 */
function ucms_layout_edit_form_cancel_submit($form, &$form_state) {
  $context  = ucms_layout_context_get();
  if ($context->isTemporary()) {
    $context->rollback();
    drupal_set_message(t("Changes have been dropped"), 'error');
    $form_state['redirect'] = [
      current_path(),
      ['query' => drupal_get_query_parameters(null, ['q', 'edit'])]
    ];
  }
}

/**
 * Blank page.
 */
function ucms_layout_blank($layout) {
  return [];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_ucms_layout_item(&$variables) {
  if (isset($variables['node'])) {
    $variables['content'] = node_view($variables['node'], $variables['view_mode']);
  } else {
    $variables['content'] = [];
  }
}

/**
 * Implements hook_custom_theme().
 */
function ucms_layout_custom_theme() {
  $patterns = [
    'admin/ucms/layout/*/add',
    'admin/ucms/layout/*/remove',
    'admin/ucms/layout/*/move',
  ];
  if (drupal_match_path(current_path(), implode("\n", $patterns))) {
    // Use front-end theme for node_view on ajax calls.
    return variable_get('theme_default');
  }
}
