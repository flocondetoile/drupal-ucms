<?php
/**
 * @file
 * UCMS - Layout management module.
 *
 * For the sake of consistency, layouts cannot be nodes, otherwise layouts
 * could be embeded into layouts, which would make a serious and non human
 * comprehensible layout-ception. Problem with this model is that we need
 * to implement by ourselves the access API for layouts, but this is the
 * only custom access API that will be implemented at all.
 *
 * @todo
 *   - better AJAX/REST requests handling
 *   - more detailed data structure (options, status)
 *   - alteration for access checks
 *   - preview mode (display unauthorized or unpublished content)
 *   - non AJAX edit forms for accessibility
 *   - regions filtering (per-theme global configuration) and checks
 *   - unit testing (sorry should have done that earlier).
 */

use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;

use MakinaCorpus\Ucms\Layout\Context;
use MakinaCorpus\Ucms\Layout\ContextManager;
use MakinaCorpus\Ucms\Layout\Item;
use MakinaCorpus\Ucms\Layout\Layout;
use MakinaCorpus\Ucms\Site\SiteManager;


/**
 * Implements hook_menu().
 */
function ucms_layout_menu() {
  $items = [];

  // Structure related configuration for administrator.
  $items['admin/structure/layout'] = [
    'title'             => "Layout management",
    'description'       => "Manage usable regions layouts and site wide configuration.",
    'page callback'     => 'ucms_layout_admin_structure',
    'access arguments'  => ['administer content types'],
    'file'              => 'ucms_layout.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/structure/layout/%ucms_layout_theme'] = [
    'title callback'    => 'ucms_layout_theme_title',
    'title arguments'   => [3],
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Layout\Admin\ThemeRegionsForm', 3],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  // AJAX endpoints.
  $items['admin/ucms/layout/%ucms_layout_temporary/add'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_add',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/ucms/layout/%ucms_layout_temporary/remove'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_remove',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/ucms/layout/%ucms_layout_temporary/move'] = [
    'page callback'     => 'ucms_layout_ajax_region_item_move',
    'page arguments'    => [3],
    'access callback'   => 'ucms_layout_access',
    'access arguments'  => ['update', 3],
    'file'              => 'ucms_layout.ajax.inc',
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Menu helper: ensures a theme exist
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   Theme name if exists and enabled, false otherwise.
 */
function ucms_layout_theme_load($theme) {
  $themes = system_list('theme');

  return (isset($themes[$theme]) && $themes[$theme]->status) ? $theme : false;
}

/**
 * Menu helper.
 *
 * @param string $theme
 *   Theme name.
 *
 * @return string
 *   The theme edit page title.
 */
function ucms_layout_theme_title($theme) {
  $themes = system_list('theme');

  if (isset($themes[$theme])) {
    return t("Edit @theme theme regions", ['@theme' => $themes[$theme]->info['name']]);
  }

  return t("Edit theme regions");
}

/**
 * Access callback for operations on layouts.
 *
 * @param string $op
 * @param Layout $layout
 *
 * @return boolean
 */
function ucms_layout_access($op, Layout $layout) {
  /* @var UserInterface $currentUser */
  $currentUser = \Drupal::service('current_user');
  /* @var SiteManager $siteManager */
  $siteManager = ucms_site_manager();

  $site = $siteManager->getStorage()->findOne($layout->getSiteId());
  return $siteManager->getAccess()->userIsWebmaster($currentUser, $site);
}

/**
 * Get the layout context manager.
 *
 * @return ContextManager
 */
function ucms_layout_context_manager() {
  return \Drupal::service('ucms_layout.context_manager');
}

/**
 * Menu helper: load layout instance in potential temporary context.
 */
function ucms_layout_temporary_load($id) {
  $contextManager = ucms_layout_context_manager();

  if ($contextManager->getPageContext()->isTemporary()) {
    $layout = $contextManager->getPageContext()->getStorage()->load($id);
    if ($layout) {
      $contextManager->getPageContext()->setCurrentLayout($layout);
      return $layout;
    }
  }
  elseif ($contextManager->getTransversalContext()->isTemporary()) {
    $layout = $contextManager->getTransversalContext()->getStorage()->load($id);
    if ($layout) {
      $contextManager->getTransversalContext()->setCurrentLayout($layout);
      return $layout;
    }
  }

  return false;
}

/**
 * Implements hook_theme().
 */
function ucms_layout_theme() {
  return [
    'ucms_layout_item' => [
      'variables' => ['nid' => null, 'node' => null, 'view_mode' => 'teaser'],
      'template'  => 'ucms-layout-item',
    ],
    'ucms_layout_region' => [
      'variables' => ['items' => [], 'name' => 'content'],
      'template'  => 'ucms-layout-region',
    ],
  ];
}

/**
 * Implements hook_node_load().
 */
function ucms_layout_node_load($nodes, $type) {
  // @todo
  //   This should be moved out into lazy code in the storage...
  //   This won't work with entitycache and should be deported.
  // Sorry, query... But at least, only when necessary.
  // Please note that the composite context fully depends on site, and not only
  // on node, so you cannot possibly load it another way than using the context.
  if (!ucms_site_manager()->hasContext()) {
    return;
  } else {
    $site = ucms_site_manager()->getContext();
  }

  foreach ($nodes as $node) {
    if (isset($node->layout_id)) {
      continue;
    }

    // Do not embed the original load into a transaction to avoid locking.
    $id = (int)db_query("SELECT id FROM {ucms_layout} WHERE nid = ? AND site_id = ?", [$node->nid, $site->id])->fetchField();

    // Check with current_path() else it may fail, due to an infinite loop
    // caused by loading the current menu object while loading the current
    // menu object...
    if (!$id && ('node/' . $node->nid === current_path())) {
      try {
        $tx = db_transaction();
        $id = (int)db_select('ucms_layout', 'ul')
          ->fields('ul', ['id'])
          ->condition('ul.nid', $node->nid)
          ->condition('ul.site_id', $site->id)
          ->execute()
          ->fetchField()
        ;
        // If another transaction happened before our first select and this
        // transaction, we will have an id here, then just close the transaction
        // and use this id.
        if (!$id) {
          $id = (int)db_insert('ucms_layout')->fields(['nid' => $node->nid, 'site_id' => $site->id])->execute();
        }
        unset($tx); // Explicit commit.
      } catch (Exception $e) {
        if ($tx) { // Exception might happen without transaction started.
          try {
            $tx->rollback();
          } catch (Exception $e2) {
            watchdog_exception(__FUNCTION__, $e2); // You're fucked.
          }
        }
        watchdog_exception(__FUNCTION__, $e);
        throw $e; // You shall not pass.
      }
    }

    $node->layout_id = $id;
  }
}

/**
 * Implements hook_page_build().
 */
function ucms_layout_page_build(&$page) {

  $site = ucms_site_manager()->getContext();

  // Only the case of a node's full page in a site context
  if (!$site || !($node = menu_get_object()) || arg(2)) {
    return;
  }

  $manager = ucms_layout_context_manager();

  $pageContext = $manager->getPageContext();
  $transversalContext = $manager->getTransversalContext();

  $pageLayout = $pageContext->getCurrentLayout();
  $transversalLayout = $transversalContext->getCurrentLayout();

  $pageEditMode = $pageContext->isTemporary();
  $transversalEditMode = $transversalContext->isTemporary();

  if (!($pageLayout instanceof Layout || $transversalLayout instanceof Layout)) {
    return; // No layout on page.
  }

  if ($pageEditMode) {
    drupal_add_js(['ucmsLayout' => [
      'editToken' => $pageContext->getToken(),
      'layoutId' => $pageLayout->getId(),
    ]], 'setting');
  }
  elseif ($transversalEditMode) {
    drupal_add_js(['ucmsLayout' => [
      'editToken' => $transversalContext->getToken(),
      'layoutId' => $transversalLayout->getId(),
    ]], 'setting');
  }

  foreach ($manager->getThemeRegionConfig($site->theme) as $regionId => $regionStatus) {

    $items = [];
    $regionEditMode = false;

    if ($regionStatus == ContextManager::PAGE_CONTEXT) {
      $region = $pageLayout->getRegion($regionId);
      $regionEditMode = $pageEditMode;
    }
    elseif ($regionStatus == ContextManager::TRANSVERSAL_CONTEXT) {
      $region = $transversalLayout->getRegion($regionId);
      $regionEditMode = $transversalEditMode;
    }
    else {
      continue;
    }

    // Preload all nodes for performance.
    $nodeIdList = $region->getAllNodeIds();

    if ($nodeIdList) {
      $map = node_load_multiple($nodeIdList);

      $map = array_filter($map, function (NodeInterface $node) {
        return $node->access('view');
      });

      if (empty($map) && !$regionEditMode) {
        continue;
      }

      /* @var $item Item */
      foreach ($region as $item) {
        $nid = $item->getNodeId();
        if (isset($map[$nid])) {
          $items[] = [
            '#theme'      => 'ucms_layout_item',
            '#nid'        => $item->getNodeId(),
            '#node'       => $map[$nid],
            '#view_mode'  => $item->getViewMode(),
          ];
        }
      }
    }

    if ($regionEditMode && empty($items) && empty($page[$regionId])) {
      // Trick block.module so that it's not "empty"
      $items = ['#markup' => ''];
    }

    if ($items) {
      $page[$regionId] = $items;
    }
  }
}

/**
 * Implements hook_preprocess_region().
 */
function ucms_layout_preprocess_region(&$vars) {
  $manager = ucms_layout_context_manager();

  if ($manager->isRegionInEditMode($vars['region'])) {
    $vars['attributes_array']['data-region'] = $vars['region'];
  }

  // Lookup for all blocks, if these are only ucms empty block, add class
  // @todo Remove handling of blocks, the module is no longer used
//  if (!empty($vars['elements']['#type'])) {
//    $vars['classes_array'][] = 'ucms-layout-empty-block';
//  }
  if (!element_children($vars['elements'])) {
    $vars['classes_array'][] = 'ucms-layout-empty-region';
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_ucms_layout_item(&$variables) {
  if (isset($variables['node'])) {
    $variables['content'] = node_view($variables['node'], $variables['view_mode']);
  } else {
    $variables['content'] = [];
  }
}

