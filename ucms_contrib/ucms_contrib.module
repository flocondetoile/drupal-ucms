<?php
/**
 * @file
 * UCMS  - Contribution.
 *
 * This module provides a full UI based upon drag'n'drop for editing content
 * and manipulating layouts.
 *
 * @todo
 *   - Keep cart items order same as insert
 *   - Add other possible cart view modes (grid, list, ...)
 *   - Add other possible UI view modes (grid, list, ...)
 *   - Add UI sorting
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

use MakinaCorpus\Ucms\Site\Access;

/**
 * View mode for content display.
 */
const UCMS_VIEW_MODE_CONTENTADMIN = 'contentadmin';

/**
 * View mode for cart display.
 */
const UCMS_VIEW_MODE_FAVORITE = 'favorite';

/**
 * Image style for search.
 */
const UCMS_STYLE_CONTENTADMIN = 'contentadmin';

/**
 * Image style for favorite.
 */
const UCMS_STYLE_FAVORITE = 'favorite';

/**
 * Implements hook_menu().
 */
function ucms_contrib_menu() {
  // Prevent using service during install.
  if (defined('MAINTENANCE_MODE')) {
    return [];
  }

  $items = [];
  // Main administration pages.
  foreach (ucms_contrib_type_handler_get()->getTabs() as $key => $label) {
    $items['admin/dashboard/' . $key] = [
      'title'             => $label,
      'page callback'     => 'ucms_contrib_admin_content_page_mine',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_NORMAL_ITEM
    ];
    $items['admin/dashboard/' . $key . '/mine'] = [
      'title'             => "My content",
      'type'              => MENU_DEFAULT_LOCAL_TASK,
      'weight'            => -10,
    ];
    $items['admin/dashboard/' . $key . '/global'] = [
      'title'             => "Global",
      'page callback'     => 'ucms_contrib_admin_content_page_global',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_VIEW_GLOBAL],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 90,
    ];
    $items['admin/dashboard/' . $key . '/group'] = [
      'title'             => "Group",
      'page callback'     => 'ucms_contrib_admin_content_page_group',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_VIEW_GROUP],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 100,
    ];
    $items['admin/dashboard/' . $key . '/local'] = [
      'title'             => "Local",
      'page callback'     => 'ucms_contrib_admin_content_page_local',
      'page arguments'    => [$key],
      'access arguments'  => ['access ucms content overview'], // @todo user has sites
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 80,
    ];
    $items['admin/dashboard/' . $key . '/flagged'] = [
      'title'             => "Flagged",
      'page callback'     => 'ucms_contrib_admin_content_page_flagged',
      'page arguments'    => [$key],
      'access callback'   => 'ucms_contrib_menu_node_access_global',
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 200,
    ];
    $items['admin/dashboard/' . $key . '/starred'] = [
      'title'             => "Starred",
      'page callback'     => 'ucms_contrib_admin_content_page_starred',
      'page arguments'    => [$key],
      'access arguments'  => [Access::PERM_CONTENT_MANAGE_GLOBAL],
      'file'              => 'ucms_contrib.pages.inc',
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 210,
    ];
  }

  // Node actions.
  $items['node/%node/publish'] = [
    'title'             => "Publish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodePublish', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['update', 1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/unpublish'] = [
    'title'             => "Unpublish content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnpublish', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['update', 1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/report'] = [
    'title'             => "Flag as inappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeFlag', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['view', 1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/unreport'] = [
    'title'             => "Un-flag as innappropriate",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnflag', 1],
    'access callback'   => 'node_access',
    'access arguments'  => ['update', 1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/star'] = [
    'title'             => "Star",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeStar', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_star',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/unstar'] = [
    'title'             => "Unstar",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnstar', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_star',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/lock'] = [
    'title'             => "Lock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeLock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/unlock'] = [
    'title'             => "Unlock",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnlock', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_lock',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/copy-on-edit'] = [
    'title'             => "Edit for my site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeCopyOnEdit', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/clone'] = [
    'title'             => "Edit",
    'page callback'     => 'ucms_contrib_node_clone',
    'page arguments'    => [1],
    'access callback'   => 'ucms_contrib_menu_node_access_copy_on_edit',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/make-group'] = [
    'title'             => "Define as group content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeMakeGroup', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];
  $items['node/%node/unmake-group'] = [
    'title'             => "Remove from group contents",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Form\NodeUnmakeGroup', 1],
    'access callback'   => 'ucms_contrib_menu_node_access_group',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK,
  ];

  // Site configuration.
  $items['admin/structure/content'] = [
    'title'             => "Contribution user interface",
    'description'       => "Manage content types categorisation and how the main contribution user interface will look like and behave.",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Contrib\Admin\NodeTabsForm'],
    'access arguments'  => ['administer content types'],
    'type'              => MENU_NORMAL_ITEM,
  ];

  // Cart operations.
  $items['admin/cart/%node/add/nojs'] = [
    'title'             => "Content",
    'page callback'     => 'ucms_contrib_ajax_favorite_add',
    'page arguments'    => [2],
    'access arguments'  => ['use favorites'],
    'file'              => 'ucms_contrib.ajax.inc',
  ];
  $items['admin/cart/%node/remove/nojs'] = [
    'title'             => "Content",
    'page callback'     => 'ucms_contrib_ajax_favorite_remove',
    'page arguments'    => [2],
    'access arguments'  => ['use favorites'],
    'file'              => 'ucms_contrib.ajax.inc',
  ];

  return $items;
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_global() {
  return user_access(Access::PERM_CONTENT_MANAGE_GLOBAL);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_group(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanPromoteToGroup(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_star(NodeInterface $node) {
  return user_access(Access::PERM_CONTENT_MANAGE_GLOBAL) && $node->access('update');
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_lock(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanLock(\Drupal::currentUser(), $node);
}

/**
 * Menu access helper.
 */
function ucms_contrib_menu_node_access_copy_on_edit(NodeInterface $node) {
  return ucms_site_node_access_helper()->userCanCopyOnEdit(\Drupal::currentUser(), $node);
}

/**
 * @return \MakinaCorpus\Ucms\Contrib\TypeHandler
 */
function ucms_contrib_type_handler_get() {
  return \Drupal::service('ucms_contrib.type_handler');
}

/**
 * Implements hook_permission().
 */
function ucms_contrib_permission() {
  return [
    'use favorites' => [
      'title' => "Access the favorites feature",
    ],
    'access ucms content overview' => [
      'title' => "Access the UCMS content overview page",
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function ucms_contrib_theme() {
  return [
    'ucms_contrib_cart' => [
      'variables' => [
        'account' => null,
        'items'   => [],
        'actions' => null,
        'display' => null,
      ],
      'template'  => 'ucms-contrib-cart',
    ],
    'ucms_contrib_content_result_grid' => [
      'variables' => [
        'nodes'     => [],
        'view_mode' => UCMS_VIEW_MODE_CONTENTADMIN,
        'mode'      => '',
      ],
      'template'  => 'ucms-contrib-content-result-grid',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function ucms_contrib_preprocess_page(&$variables) {
  // @todo this should check for any layout at all being here
  if (!path_is_admin(current_path()) && ($site = ucms_site_manager()->getContext()) && ucms_site_manager()->getAccess()->userIsWebmaster(\Drupal::currentUser(), $site)) {
    $variables['page']['content'][] = \Drupal::formBuilder()->getForm('MakinaCorpus\Ucms\Layout\Form\LayoutContextEditForm');
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function ucms_contrib_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'][UCMS_VIEW_MODE_CONTENTADMIN] = [
    'label' => t('Content admin display'),
    'custom settings' => false,
  ];
  $entity_info['node']['view modes'][UCMS_VIEW_MODE_FAVORITE] = [
    'label' => t('Favorite in cart'),
    'custom settings' => false,
  ];
}

/**
 * Implements hook_image_default_styles().
 */
function ucms_contrib_image_default_styles() {
  return [
    UCMS_STYLE_CONTENTADMIN => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 285, // ~ col-md-3
          'height'  => 285,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
    UCMS_STYLE_FAVORITE => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 120, // ~ col-md-6 in cart
          'height'  => 120,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
  ];
}

/**
 * Implements hook_node_view_alter().
 *
 * Removes links from nodes when in build modes used for back office.
 */
function ucms_contrib_node_view_alter(&$build) {
  switch ($build['#view_mode']) {

    case UCMS_VIEW_MODE_CONTENTADMIN:
    case UCMS_VIEW_MODE_FAVORITE:
      $build['links']['#access'] = false;
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Removes submitted information and adds necessary stuff for JS.
 */
function ucms_contrib_preprocess_node(&$variables) {
  switch ($variables['view_mode']) {

    case UCMS_VIEW_MODE_CONTENTADMIN:
    case UCMS_VIEW_MODE_FAVORITE:
      $variables['submitted'] = null;
      break;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function ucms_contrib_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['node'];

  $form['locked'] = [
    '#type' => 'checkbox',
    '#title' => t('Lock this content'),
    '#default_value' => isset($node->is_clonable) ? !((bool) $node->is_clonable) : 0,
    '#weight' => 100,
  ];
}

/**
 * Implements hook_node_submit().
 */
function ucms_contrib_node_submit($node, $form, &$form_state) {
  $node->is_clonable = ((bool) $form_state['values']['locked']) ? 0 : 1;
}

/**
 * Render one's favorite cart.
 *
 * @param int|AccountInterface $account
 *
 * @return []
 *   drupal_render() friendly structure.
 */
function ucms_contrib_favorite_render($account = null) {

  if (!$account) {
    $uid = $GLOBALS['user']->uid;
  } else if (is_object($account)) {
    $uid = $account->uid;
  } else {
    $uid = (int)$account;
  }

  /* @var $cart \MakinaCorpus\Ucms\Contrib\CartStorage */
  $cart     = \Drupal::service('ucms_contrib.cart');
  $nidList  = $cart->listFor($uid);
  $nodes    = $nidList ? node_load_multiple($nidList) : [];

  $display = (new \MakinaCorpus\Ucms\Contrib\NodeCartDisplay())
    ->setParameterName('cd')
    ->prepareFromQuery($_GET)
  ;

  $ret = [
    '#theme'    => 'ucms_contrib_cart',
    '#account'  => $uid,
    '#display'  => $display->renderLinks(current_path()),
    '#items'    => $display->render($nodes),
  ];

  $ret['#attached']['library'][] = ['system', 'ui.droppable'];
  $ret['#attached']['library'][] = ['system', 'ui.draggable'];
  $ret['#attached']['library'][] = ['system', 'ui.sortable'];
  $ret['#attached']['library'][] = ['ucms_contrib', 'ucms_contrib'];

  return $ret;
}

/**
 * Implements hook_library().
 */
function ucms_contrib_library() {
  return [
    'ucms_contrib' => [
      'title'   => 'UCMS - Contrib',
      'version' => '0.1',
      'js'      => [
        drupal_get_path('module', 'ucms_contrib') . '/ucms_contrib.js' => [],
      ],
      'css'     => [
        drupal_get_path('module', 'ucms_contrib') . '/ucms_contrib.css' => [
          'type'  => 'file',
          'media' => 'screen',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * @TODO move to a HSM module?
 */
function ucms_contrib_field_attach_view_alter(&$output, $context) {
  $mapping = [
    UCMS_VIEW_MODE_CONTENTADMIN => UCMS_STYLE_CONTENTADMIN,
    UCMS_VIEW_MODE_FAVORITE     => UCMS_STYLE_FAVORITE,
  ];

  // Only work on nodes and some view modes.
  if ($context['entity_type'] != 'node' || !isset($mapping[$context['view_mode']])) {
    return;
  }
  $view_mode = $mapping[$context['view_mode']];

  // Force image style on content viewed in admin mode
  $image_found = FALSE;
  if (in_array($context['view_mode'], array_keys($mapping))) {
    foreach (element_children($output) as $field_name) {
      $element = &$output[$field_name];
      $image_found = _ucms_contrib_find_image_recursive($element, $view_mode);
      if ($image_found) {
        break;
      }
    }
  }

  if (!$image_found) {
    // Add a default image for other medias/content.
    $icon_mapping = [
      // media
      'document'  => 'file',
      'video'     => 'film',
      // Composite content
      'list_type' => 'list',
      'search'    => 'search',
      'geosearch' => 'map-marker',
      // other content
      'form'      => 'list-alt',
      'job_offer' => 'briefcase',
    ];
    $markup = '<div class="ucms-default-icon img-thumbnail"><div><div>';
    if (!empty($icon_mapping[$output['#bundle']])) {
      $markup .= '<span class="glyphicon glyphicon-' . $icon_mapping[$output['#bundle']] . '"></span>';
    }
    else {
      $markup .= '<span>' . node_type_get_name($context['entity']) . '</span>';
    }
    $markup .= '</div></div></div>';
    $output['default_icon'] = [
      '#markup' => $markup,
    ];
  }

  // Add icon relative to meta content type
  $icon_mapping = [
    'content' => 'file',
    'media'   => 'picture',
  ];
  $meta_type = NULL;
  $typeHandler = ucms_contrib_type_handler_get();
  foreach ($typeHandler->getTabs() as $tab => $label) {
    if (in_array($output['#bundle'], $typeHandler->getTabTypes($tab))) {
      $meta_type = $tab;
    }
  }
  if ($meta_type && isset($icon_mapping[$meta_type])) {
    $output['type_icon'] = [
      '#markup' => '<span class="ucms-type-icon glyphicon glyphicon-' . $icon_mapping[$meta_type] . '"></span>',
    ];
  }
}

/**
 * @param $element
 * @param $view_mode
 * @return bool
 */
function _ucms_contrib_find_image_recursive(&$element, $view_mode) {
  $image_found = FALSE;
  if (isset($element['#field_type']) && $element['#field_type'] == 'image' && $element['#formatter'] == 'image') {
    foreach (element_children($element) as $delta) {
      if ($delta === 0) {
        $image_found = TRUE;
        // Force image style related to view mode.
        $element[$delta]['#image_style'] = $view_mode;
        $element[$delta]['#item']['attributes']['class'] = 'img-responsive img-rounded';
      }
      else {
        // Hide other image for slideshows.
        $element[$delta]['#access'] = FALSE;
      }
    }
  }
  elseif (count(element_children($element))) {
    foreach (element_children($element) as $key) {
      $image_found = _ucms_contrib_find_image_recursive($element[$key], $view_mode);
      if ($image_found) {
        return TRUE;
      }
    }
  }
  else {
    $element['#access'] = FALSE;
  }
  return $image_found;
}


/**
 * Preprocess theme_ucms_contrib_content_result_grid().
 *
 * @param $vars
 */
function template_preprocess_ucms_contrib_content_result_grid(&$vars) {
  $node_views = node_view_multiple($vars['nodes'], $vars['view_mode']);
  $vars['nodes'] = [];
  foreach(element_children($node_views['nodes']) as $child_key) {
    $vars['nodes'][$child_key] = $node_views['nodes'][$child_key];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ucms_contrib_field_widget_unoderef_form_alter(&$element, &$form_state, $context) {
  // FIXME
  \Drupal::service('ucms_dashboard.context')
    ->addTab('cart', t("Cart"), 'shopping-cart')
    ->add(ucms_contrib_favorite_render(), 'cart');
}

/**
 * Implements hook_node_insert().
 */
function ucms_contrib_node_insert($node) {
  if (isset($node->parent_nid)) {
    // Menu path is handled by menu_node_insert().

    // Update layout
    db_update('ucms_layout')
      ->fields(['nid' => $node->nid])
      ->condition('site_id', $node->site_id)
      ->condition('nid', $node->parent_nid)
      ->execute()
    ;

    // Dereference original node
    db_delete('ucms_site_node')
      ->condition('site_id', $node->site_id)
      ->condition('nid', $node->parent_nid)
      ->execute()
    ;
  }
}

/**
 * Implements hook_admin_paths().
 */
function ucms_contrib_admin_paths() {
  $paths = [
    'node/*/clone' => TRUE,
  ];
  return $paths;
}

/**
 * Clone form callback
 *
 * @param $originalNode
 * @return array|mixed
 */
function ucms_contrib_node_clone($originalNode) {
  global $user;

  $node = clone $originalNode;

  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->log = NULL;

  $node->name = isset($user->name) ? $user->name : NULL;
  $node->uid = $user->uid;

  $node->created = NULL;
  $node->path = NULL;
  $node->files = [];

  // Fill in the default values.
  $node->status = 0;
  $node->promote = 0;
  $node->sticky = 0;
  $node->revision = 1;

  // Reset sites information
  $node->site_id = NULL;
  $node->ucms_sites = [];

  // Set the origin_id and parent_id.
  $node->parent_nid = $originalNode->nid;
  if (isset($originalNode->origin_nid)) {
    $node->origin_nid = $originalNode->origin_nid;
  } else {
    $node->origin_nid = $originalNode->nid;
  }

  // Make sure the file defining the node form is loaded.
  $form_state = [];
  $form_state['build_info']['args'] = [$node];
  form_load_include($form_state, 'inc', 'node', 'node.pages');

  return drupal_build_form($node->type . '_node_form', $form_state);
}
