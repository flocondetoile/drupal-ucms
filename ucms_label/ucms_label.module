<?php
/**
 * @file
 * UCMS - Label management.
 */


use MakinaCorpus\Ucms\Label\LabelAccess;


/**
 * Implements hook_menu().
 */
function ucms_label_menu() {
  $items = [];

  $items['admin/dashboard/label'] = [
    'title'             => "Labels",
    'page callback'     => 'ucms_label_dashboard_label_list',
    'access arguments'  => [LabelAccess::PERM_ACCESS_DASHBOARD],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_label.dashboard.inc',
  ];

  $items['admin/dashboard/label/add'] = [
    'title'             => "Add new label",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Label\Form\LabelEdit'],
    'access callback'   => 'ucms_label_access_manage',
    'access arguments'  => [LabelAccess::OP_ADD],
    'type'              => MENU_NORMAL_ITEM,
  ];

  $items['admin/dashboard/label/%taxonomy_term/edit'] = [
    'title callback'    => 'ucms_label_menu_item_title',
    'title arguments'   => [LabelAccess::OP_EDIT, 3],
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Label\Form\LabelEdit', 3],
    'access callback'   => 'ucms_label_access_manage',
    'access arguments'  => [LabelAccess::OP_EDIT, 3],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/label/%taxonomy_term/subscribe'] = [
    'title'             => "Subscribe to the notifications",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Label\Form\LabelSubscribe', 3],
    'access arguments'  => [LabelAccess::PERM_ACCESS_DASHBOARD],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/label/%taxonomy_term/unsubscribe'] = [
    'title'             => "Unsubscribe from the notifications",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Label\Form\LabelUnsubscribe', 3],
    'access arguments'  => [LabelAccess::PERM_ACCESS_DASHBOARD],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/label/%taxonomy_term/delete'] = [
    'title callback'    => 'ucms_label_menu_item_title',
    'title arguments'   => [LabelAccess::OP_DELETE, 3],
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Label\Form\LabelDelete', 3],
    'access callback'   => 'ucms_label_access_manage',
    'access arguments'  => [LabelAccess::OP_DELETE, 3],
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}


/**
 * Implements hook_permission().
 */
function ucms_label_permission() {
  return [
    LabelAccess::PERM_ACCESS_DASHBOARD => [
      'title' => t("View labels"),
    ],
    LabelAccess::PERM_EDIT_LOCKED => [
      'title' => t("Edit locked labels"),
    ],
    LabelAccess::PERM_EDIT_NON_LOCKED => [
      'title' => t("Edit non locked labels"),
    ],
  ];
}


/**
 * Checks the user's permissions for operations on labels.
 */
function ucms_label_access_manage($op, $label = null, $account = null) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  $manager = ucms_label_manager();

  switch ($op) {
    case LabelAccess::OP_ADD:
      return $manager->canEditNonLockedLabels($account) || $manager->canEditLockedLabels($account);

    case LabelAccess::OP_DELETE:
      if ($manager->hasChildren($label)) {
        return false;
      }

    case LabelAccess::OP_EDIT:
      return $manager->canEditLabel($label, $account);
  }

  return false;
}


/**
 * Callback for menu items titles.
 */
function ucms_label_menu_item_title($op, $label) {
  switch ($op) {
    case LabelAccess::OP_EDIT:
      return t("Edit \"@name\" label", ['@name' => $label->name]);
    case LabelAccess::OP_DELETE:
      return t("Delete \"@name\" label", ['@name' => $label->name]);
  }
}


/**
 * Implements hook_taxonomy_term_presave().
 *
 * Prevents to save a label with a parent if it has children.
 * The labels vocabulary must have only two levels.
 *
 * This control is just here in case of someone calls directly
 * taxonomy_term_save() instead of LabelManager::saveLabel()
 * (which already makes this control).
 *
 * @throws \LogicException
 */
function ucms_label_taxonomy_term_presave($term) {
  $manager = ucms_label_manager();

  if (!empty($term->tid) && $term->vocabulary_machine_name == $manager->getVocabularyMachineName()) {
    if (!isset($term->original->parent)) {
      $term->original->parent = 0;
    }

    if ($manager->hasChildren($term) && $term->parent != $term->original->parent) {
      throw new \LogicException("Can't define a parent to a label which has children.");
    }
  }
}


/**
 * Implements hook_taxonomy_term_delete().
 *
 * Prevents to delete a label which has children.
 *
 * This control is just here in case of someone calls directly
 * taxonomy_term_delete() instead of LabelManager::deleteLabel()
 * (which already makes this control).
 *
 * @throws \LogicException
 */
function ucms_label_taxonomy_term_delete($term) {
  $manager = ucms_label_manager();

  if ($manager->hasChildren($term)) {
    throw new \LogicException("Can't delete a label which has children.");
  }
}


/**
 * Provide options for label
 *
 * @param $field
 * @return array
 */
function ucms_label_allowed_values($field) {
  $options = [];
  foreach ($field['settings']['allowed_values'] as $tree) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
      if ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'])) {
        $parents = [];
        foreach ($terms as $term) {
          if ($term->depth == 0) {
            $options[$term->name] = [];
            $parents[$term->tid] = $term->name;
          }
          else {
            $options[$parents[$term->parents[0]]][$term->tid] = $term->name;
          }
        }
      }
    }
  }
  return $options;
}


/**
 * Implements hook_library().
 */
function ucms_label_library() {
  $libraries['select2'] = array(
    'title' => 'Select2',
    'website' => 'https://select2.github.io',
    'version' => '4.0.1',
    'js' => array(
      drupal_get_path('module', 'ucms_label') . '/js/select2.min.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'ucms_label') . '/js/select2.min.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      drupal_get_path('module', 'ucms_label') . '/js/select2-bootstrap.min.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ucms_label_field_widget_options_select_form_alter(&$element, &$form_state, $context) {
  // Attach select2 library on labels vocabulary.
  $field = $context['field'];
  if ($field['type'] == "taxonomy_term_reference" && $field['settings']['allowed_values'][0]['vocabulary'] == "labels") {
    $element['#attached']['library'][] = ['ucms_label', 'select2'];
    $element['#attached']['js'][] = [
      'data' => "jQuery(function(){jQuery('#edit-labels select').select2({theme:'bootstrap'})})",
      'type' => 'inline'
    ];
  }
}


/**
 * Provides the labels manager service.
 *
 * @return MakinaCorpus\Ucms\Label\LabelManager
 */
function ucms_label_manager() {
  return \Drupal::service('ucms_label.manager');
}
