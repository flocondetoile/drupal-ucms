<?php
/**
 * @file
 * ÂµCMS user management module.
 */

use Drupal\Core\Session\AccountInterface;

use MakinaCorpus\Ucms\Site\Access;
use MakinaCorpus\Ucms\Site\SiteState;
use MakinaCorpus\Ucms\User\UserAccess;


define('UCMS_USER_PWD_MIN_LENGTH', 8);


/**
 * Implements hook_menu().
 */
function ucms_user_menu() {
  $items = [];

  $items['admin/dashboard/user'] = [
    'title'             => 'Users',
    'page callback'     => 'ucms_user_dashboard_user_list',
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_user.dashboard.inc',
  ];

  $items['admin/dashboard/user/add'] = [
    'title'             => 'Create user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEdit'],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_NORMAL_ITEM,
  ];

  $items['admin/dashboard/user/%user'] = [
    'title callback'    => 'ucms_user_menu_item_title',
    'title arguments'   => [3],
    'page callback'     => 'ucms_user_dashboard_user_view',
    'page arguments'    => [3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_user.dashboard.inc',
  ];

  $items['admin/dashboard/user/my-account'] = [
    'title'            => 'Edit my account information',
    'page callback'    => 'sf_dic_page_form',
    'page arguments'   => ['MakinaCorpus\Ucms\User\Form\MyAccountEdit'],
    'access callback'  => true,
    'type'             => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/my-password'] = [
    'title'            => 'Change my password',
    'page callback'    => 'sf_dic_page_form',
    'page arguments'   => ['MakinaCorpus\Ucms\User\Form\MyAccountChangePassword'],
    'access callback'  => true,
    'type'             => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/view'] = [
    'title'             => 'View',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'weight'            => -20
  ];

  $items['admin/dashboard/user/%user/edit'] = [
    'title'             => 'Edit',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEdit', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => -10
  ];

  $items['admin/dashboard/user/%user/reset-password'] = [
    'title'             => 'Reset password',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserResetPassword', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_LOCAL_TASK,
  ];

  $items['admin/dashboard/user/%user/delete'] = [
    'title'             => 'Delete',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserDelete', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 100,
  ];

  $items['admin/dashboard/user/%user/enable'] = [
    'title'             => 'Enable the user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserEnable', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/disable'] = [
    'title'             => 'Disable the user',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserDisable', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/user/%user/change-email'] = [
    'title'             => 'Change email',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserChangeEmail', 3],
    'access arguments'  => [UserAccess::PERM_MANAGE_ALL],
    'type'              => MENU_CALLBACK,
  ];

  $items['set-password/%'] = [
    'title'             => 'Set password',
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\User\Form\UserSetPassword', 1],
    'access callback'   => true,
    'type'              => MENU_CALLBACK,
  ];

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function ucms_user_menu_alter(&$items) {
  // Changes the new password request form
  $items['user/password']['page callback']  = 'sf_dic_page_form';
  $items['user/password']['page arguments'] = ['MakinaCorpus\Ucms\User\Form\UserRequestNewPassword'];
}


/**
 * Title callback for menu items.
 */
function ucms_user_menu_item_title($user) {
  return t("User @name", ['@name' => $user->name]);
}


/**
 * Implements hook_permission().
 */
function ucms_user_permission() {
  return [
    UserAccess::PERM_MANAGE_ALL => [
      'title' => t("Manage all users"),
    ],
  ];
}


/**
 * Implements hook_theme().
 */
function ucms_user_theme($existing, $type, $theme, $path) {
  return [
    'ucms_user_profile' => array(
      'variables' => ['account' => null],
      'template' => 'ucms-user-profile',
    ),
    'ucms_user_account_portlet' => array(
      'render element' => 'element',
    ),
  ];
}


/**
 * Implements template_preprocess_THEME().
 */
function template_preprocess_ucms_user_profile(&$variables) {
  $account = $variables['account'];

  $manager = ucms_site_manager();

  /* @var $account AccountInterface */
  $access = $manager->getAccess();
  $roles = array_map(
    function ($role_id) use ($access) {
      return $access->getDrupalRoleName($role_id);
    },
    $account->getRoles(true)
  );

  $sites = $manager->loadOwnSites($account);
  $requests = [];
  foreach ($sites as $id => $site) {
    $site_name = l($site->title_admin, 'admin/dashboard/site/' . $site->id);

    if ($site->state == SiteState::REQUESTED) {
      $requests[] = $site_name;
      unset($sites[$id]);
    }
    else {
      $role_name = $access->getRelativeRoleName($access->getUserRole($account, $site)->getRole());
      $sites[$id] = $site_name . ' (' . $role_name . ')';
    }
  }

  $roles = [
    '#theme'      => 'item_list',
    '#items'      => $roles,
    '#attributes' => ['class' => ['list-unstyled']],
    '#empty_list' => t("No role"),
  ];
  $sites = [
    '#theme'      => 'item_list',
    '#items'      => $sites,
    '#attributes' => ['class' => ['list-unstyled']],
    '#empty_list' => t("No site"),
  ];
  $requests = [
    '#theme'      => 'item_list',
    '#items'      => $requests,
    '#attributes' => ['class' => ['list-unstyled']],
    '#empty_list' => t("No pending request"),
  ];
  $last_connection = ($account->login > 0) ? format_date($account->login) : t("Never");

  $variables['details_table'] = [
    '#theme' => 'table',
    '#rows' => [
      [['data' => t("Created at"), 'header' => true], format_date($account->created)],
      [['data' => t("Last connection at"), 'header' => true], $last_connection],
      [['data' => t("Roles"), 'header' => true], $roles],
    ],
  ];

  if ($account->hasPermission(Access::PERM_SITE_REQUEST)) {
    $variables['details_table']['#rows'][] = [['data' => t("Pending requests"), 'header' => true], $requests];
  }

  $variables['details_table']['#rows'][] = [['data' => t("Sites"), 'header' => true], $sites];
}

/**
 * Allows to override account portlet from theme.
 */
function theme_ucms_user_account_portlet($variables) {
  return $variables['element']['#children'];
}

/**
 * Implements hook_mail().
 */
function ucms_user_mail($key, &$message, $params) {
  $langcode = isset($message['language']) ? $message['language']->language : null;

  switch ($key) {
    case 'new-account-disabled':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_account_disabled_subject_' . $langcode,
          t("You have been registered at [site:name]", [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_account_disabled_body_' . $langcode,
          t("[user:name],

An account has been created for you at [site:name].

You can activate it by clicking this link or copying and pasting it to your browser:

[user:set-password-url]

This link can only be used once and will lead you to a page where you can set your password.

After setting your password, you will be able to log in at [site:login-url] in the future using your username: [user:name].

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'new-account-enabled':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_account_enabled_subject_' . $langcode,
          t("You have been registered at [site:name]", [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_account_enabled_body_' . $langcode,
          t("[user:name],

An account has been created for you at [site:name].

This account is already active, you will be able to log in at [site:login-url] using the password that we will provide you soon.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'new-password-request':
      $message['subject'] = variable_get(
          'ucms_user_mail_new_password_request_subject_' . $langcode,
          t('Your new password request at [site:name]', [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_new_password_request_body_' . $langcode,
          t("[user:name],

A request to reset the password for your account has been made at [site:name].

You may now set your new password by clicking this link or copying and pasting it to your browser:

[user:set-password-url]

This link can only be used once and will lead you to a page where you can set your password.
It expires after one day and nothing will happen if it's not used.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;

    case 'password-reset':
      $message['subject'] = variable_get(
          'ucms_user_mail_password_reset_subject_' . $langcode,
          t('Reset of your password at [site:name]', [], ['langcode' => $langcode])
      );
      $message['body'][] = variable_get(
          'ucms_user_mail_password_reset_body_' . $langcode,
          t("[user:name],

Your password has been resetted by an administrator at [site:name].

Please set your new password by clicking this link or copying and pasting it to your browser:

[user:set-password-url]

This link can only be used once and will lead you to a page where you can set your password.
It expires after one day and nothing will happen if it's not used.

--  [site:name] team", [], ['langcode' => $langcode]));
      break;
  }

  $variables = [
    'user' => $params['user'],
    'token' => $params['token'],
  ];

  $options = [
    'language' => $message['language'],
    'callback' => 'ucms_user_replace_tokens',
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    'sanitize' => false,
    'clear' => true,
  ];

  $message['subject'] = token_replace($message['subject'], $variables, $options);
  $message['body'][0] = token_replace($message['body'][0], $variables, $options);
}


/**
 * Callback to add exceptional tokens.
 */
function ucms_user_replace_tokens(&$replacements, $data, $options) {
  if (isset($data['token'])) {
    $replacements['[user:set-password-url]'] = url('set-password/' . $data['token']->token, ['absolute' => true]);
  }
}
