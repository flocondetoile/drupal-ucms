<?php
/**
 * @file
 * UCMS Tree module.
 */

use Drupal\node\NodeInterface;

use MakinaCorpus\Umenu\TreeItem;

/**
 * Implements hook_menu().
 */
function ucms_tree_menu() {
  $items = [];

  $items['admin/dashboard/tree'] = [
    'title'           => 'Tree',
    'page callback'   => 'sf_dic_page_form',
    'page arguments'  => ['MakinaCorpus\Ucms\Tree\Form\TreeForm'],
    'access callback' => 'ucms_tree_check_access',
    'type'            => MENU_CALLBACK,
  ];

  $items['node/add/here'] = [
    'title'           => 'Add content at position',
    'page callback'   => 'sf_dic_page',
    'page arguments'  => ['MakinaCorpus\Ucms\Tree\Controller\TreeController::addContentHere'],
    'access callback' => ['ucms_tree_check_access'],
    'type'            => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Find most revelant menu item for node in context
 *
 * @param int|NodeInterface $nodeId
 *
 * @return TreeItem
 *
 * @deprecated
 *   Move this out to a service somewhere
 */
function ucms_tree_find_node_item($node) {

  $siteManager = ucms_site_manager();
  $treeManager = umenu_get_manager();

  if (!$siteManager->hasContext()) {
    return null;
  }

  $nodeId = null;

  if ($node instanceof NodeInterface) {
    $nodeId = $node->id();
  } else if (is_numeric($node)) {
    $nodeId = $node;
  } else {
    return null;
  }

  $name = 'site-main-' . $siteManager->getContext()->getId();

  return $treeManager->buildTree($name)->getMostRevelantItemForNode($nodeId);
}

/**
 * @return mixed
 */
function ucms_tree_check_access($account = NULL) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }

  $manager = ucms_site_manager();
  if ($manager && $manager->getContext()) {
    return $manager
      ->getAccess()
      ->userCanEditTree($account, $manager->getContext())
    ;
  }

  return FALSE;
}

/**
 * Implements hook_library().
 */
function ucms_tree_library() {
  $path = drupal_get_path('module', 'ucms_tree');
  return [
    'nested-sortable' => [
      'title'        => 'Nested Sortable',
      'website'      => 'https://github.com/ilikenwf/nestedSortable',
      'version'      => '2.0-alpha',
      'js'           => [
        $path . '/js/jquery.nestedSortable.js' => [],
        $path . '/js/ucms_tree.js'             => [],
      ],
      'css'          => [
        $path . '/ucms_tree.css' => [
          'type'  => 'file',
          'media' => 'screen',
        ],
      ],
      'dependencies' => [
        ['system', 'ui.sortable'],
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ucms_tree_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($_GET['menu'])) {

    try {
      $account      = \Drupal::currentUser();
      $treeManager  = umenu_get_manager();
      $siteManager  = ucms_site_manager();
      $menu         = $treeManager->getMenuStorage()->load($_GET['menu']);

      // Those exceptions will be silenced anyway.
      if (!$siteManager->hasContext()) {
          throw new \InvalidArgumentException("You see, in this world there's two kinds of people, my friend: Those with loaded guns and those who dig. You dig.");
      }
      if (!$siteManager->getAccess()->userIsWebmaster($account, $siteManager->getContext())) {
          throw new \InvalidArgumentException("You know how to whistle, don't you, Steve? You just put your lips together - and blow.");
      }
      if ($menu['site_id'] != $siteManager->getContext()->getId()) {
          throw new \InvalidArgumentException("Open the pod bay doors, HAL. I'm sorry Dave, I'm afraid I can't do that.");
      }

      // Add GET parameters to form
      $form['menu'] = [
        '#tree' => TRUE,
      ];
      $form['menu']['menu'] = [
        '#type'  => 'value',
        '#value' => $_GET['menu'],
      ];
      $form['menu']['plid'] = [
        '#type'  => 'value',
        '#value' => !empty($_GET['parent']) ? $_GET['parent'] : 0,
      ];
      $form['menu']['position'] = [
        '#type'  => 'value',
        '#value' => $_GET['position'],
      ];
    } catch (\Exception $e) {
      // Ok, somehow the user messed up with GET parameters, just let him
      // believe it'll work silently, but seriously, don't make him angry
      // with an error page, the rest will work gracefully anyway, the
      // content will just not be in a menu...
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function ucms_tree_node_insert($node) {
  if (isset($node->menu)) { // We handle only insert

    // @todo THIS IS SO WRONG IMPLEMENT ->insertAt() and ->insertAsChildAt()

    $menuId       = $node->menu['menu'];
    $treeManager  = umenu_get_manager();
    $tree         = $treeManager->buildTree($menuId);
    $itemStorage  = $treeManager->getItemStorage();
    $index        = $node->menu['position'];
    $parentId     = $node->menu['parent'];

    $parent = null;
    if ($parentId) {
      $parent = $tree->getItemById($parentId);
    } else {
      $parent = $tree;
    }

    // Calculate the position depending on siblings
    $before = null;
    $after = null;
    if (!$index) {
      // We need to prepend
      foreach ($parent->getChildren() as $item) {
        $before = $item;
        break;
      }
    } else if ($index >= $parent->getChildCount()) {
      foreach ($parent->getChildren() as $item) { // Fetch last
        $after = $item;
      }
    } else {
      $count = 0;
      foreach ($parent->getChildren() as $item) {
        if ($count <= $index) {
          $before = $item;
        } else {
          $after = $item;
          break;
        }
        $count++;
      }
    }

    if ($after) {
      $itemStorage->insertAfter($after->getId(), $node->id(), $node->getTitle());
    } else if ($before) {
      $itemStorage->insertBefore($before->getId(), $node->id(), $node->getTitle());
    } else {
      // We could not find anything any relatives, if there is a parent, just
      // put the item under the parent, if there is no parent just put in the
      // root
      if ($parent && $parentId) {
        $itemStorage->insertAsChild($parentId, $node->id(), $node->getTitle());
      } else {
        $itemStorage->insert($menuId, $node->id(), $node->getTitle());
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ucms_tree_node_delete($node) {
  // Delete all menu module links that point to this node.
  $mlids = db_select('menu_links', 'ml')
    ->fields('ml', ['mlid'])
    ->condition('link_path', 'node/' . $node->nid)
    ->condition('module', 'menu')
    ->execute()
    ->fetchCol()
  ;
  foreach ($mlids as $mlid) {
    menu_link_delete($mlid);
  }
}
