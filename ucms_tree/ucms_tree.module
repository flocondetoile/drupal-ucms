<?php


/**
 * Implements hook_menu().
 */
function ucms_tree_menu() {
  $items = [];

  $items['admin/dashboard/tree'] = [
    'title'           => 'Tree',
    'page callback'   => 'sf_dic_page_form',
    'page arguments'  => ['MakinaCorpus\Ucms\Tree\Form\TreeForm'],
    'access callback' => 'ucms_tree_check_access',
    'type'            => MENU_CALLBACK,
  ];

  $items['node/add/here'] = [
    'title'           => 'Add content at position',
    'page callback'   => 'sf_dic_page',
    'page arguments'  => ['MakinaCorpus\Ucms\Tree\Controller\TreeController::addContentHere'],
    'access callback' => ['ucms_tree_check_access'],
    'type'            => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * @return mixed
 */
function ucms_tree_check_access($account = NULL) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }

  $manager = ucms_site_manager();
  if ($manager && $manager->getContext()) {
    return $manager
      ->getAccess()
      ->userCanEditTree($account, $manager->getContext())
      ;
  }
  return FALSE;
}

/**
 * Implements hook_library().
 */
function ucms_tree_library() {
  $path = drupal_get_path('module', 'ucms_tree');
  return [
    'nested-sortable' => [
      'title'        => 'Nested Sortable',
      'website'      => 'https://github.com/ilikenwf/nestedSortable',
      'version'      => '2.0-alpha',
      'js'           => [
        $path . '/js/jquery.nestedSortable.js' => [],
        $path . '/js/ucms_tree.js'             => [],
      ],
      'css'          => [
        $path . '/ucms_tree.css' => [
          'type'  => 'file',
          'media' => 'screen',
        ],
      ],
      'dependencies' => [
        ['system', 'ui.sortable'],
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ucms_tree_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($_GET['menu_name'])) {

    // Verify access to menu
    $matches = [];
    preg_match('@.*-(\d+)@', $_GET['menu_name'], $matches);
    $manager = ucms_site_manager();
    $site = $manager->getContext();
    $account = \Drupal::currentUser();
    if (!$site
      || $site->getId() !== $matches[1]
      || !$manager->getAccess()->userIsWebmaster($account, $site)) {
      drupal_access_denied();
      exit;
    }

    // Add GET parameters to form
    $form['menu'] = [
      '#tree' => TRUE,
    ];
    $form['menu']['menu_name'] = [
      '#type'  => 'value',
      '#value' => $_GET['menu_name'],
    ];
    $form['menu']['plid'] = [
      '#type'  => 'value',
      '#value' => !empty($_GET['parent']) ? $_GET['parent'] : 0,
    ];
    $form['menu']['position'] = [
      '#type'  => 'value',
      '#value' => $_GET['position'],
    ];
  }
}

/**
 * Implements hook_node_insert().
 */
function ucms_tree_node_insert($node) {
  // We handle only insert
  if (isset($node->menu)) {
    $link = &$node->menu;
    $link['link_title'] = $node->title;
    $link['link_path'] = "node/$node->nid";

    // Calculate the position depending on siblings
    $siblings = menu_build_tree($node->menu['menu_name'], [
      'plid' => $node->menu['plid'],
    ]);
    $index = 0;
    $previous_sibling_weight = -100;
    $weight_proposition = -100;
    foreach ($siblings as $sibling) {
      $sibling_weight = (int)$sibling['link']['weight'];
      if ($node->menu['position'] == $index) {
        // Take the half between prev sibling weight and the sibling's
        $weight_proposition = $sibling_weight - ($sibling_weight - $previous_sibling_weight) / 2;
      }
      $previous_sibling_weight = $sibling_weight;
      $index++;
    }
    $link['weight'] = $weight_proposition;

    if (!menu_link_save($link)) {
      drupal_set_message(t('There was an error saving the menu link.'), 'error');
    }
  }
}


/**
 * Implements hook_node_delete().
 */
function ucms_tree_node_delete($node) {
  // Delete all menu module links that point to this node.
  $mlids = db_select('menu_links', 'ml')
    ->fields('ml', ['mlid'])
    ->condition('link_path', 'node/' . $node->nid)
    ->condition('module', 'menu')
    ->execute()
    ->fetchCol()
  ;
  foreach ($mlids as $mlid) {
    menu_link_delete($mlid);
  }
}
