<?php
/**
 * @file
 * Install and field stuff, mostly...
 */

/**
 * Implements hook_schema().
 */
function ucms_seo_schema() {
  $schema = [];

  // Provide a remplacement for the alias table, since Drupal 8 has not
  // the hook_schema_alter() anymore, we'll also provide a replacement
  // AliasStorageInterface to come up with.
  $aliasTable = drupal_get_schema_unprocessed('system', 'url_alias');
  $aliasTable['fields']['site_id'] = [
    'description' => "Site identifier this alias belongs to",
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => true,
  ];
  $aliasTable['fields']['is_canonical'] = [
    'description' => "Is this alias the canonical alias for the source path",
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => true,
    'default'     => 0,
  ];
  $aliasTable['fields']['priority'] = [
    'description' => "Defines a priority order for alias selection",
    'type'        => 'int',
    'not null'    => true,
    'default'     => 0,
  ];
  $aliasTable['fields']['expires'] = [
    'description' => "When this alias expires",
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => false,
    'default'     => null,
  ];
  $schema['ucms_seo_alias'] = $aliasTable;
  $schema['ucms_seo_alias']['unique keys']['uk_ucms_seo_alias_site'] = ['alias', 'site_id'];

  // Same statement as upper, any performance critical meta information must
  // live in a database table we keep the ownership on, any field API usage
  // here would forces us to proceed to heavy recursive processing over
  // nodes, while a decent SGBD can do proper aggregates on any queries.
  $schema['ucms_seo_node'] = [
    'description' => 'Node performance critical SEO information',
    'fields' => [
      'nid' => [
        'description' => "Node identifier",
        'type'        => 'int',
        'unsigned'    => true,
        'not null'    => true,
      ],
      'alias_segment' => [
        'description' => "Node URL segment for building menu aliases",
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ],
      'meta_title' => array(
        'description' => "Page meta title page",
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => false,
        'default'     => null,
      ),
      'meta_description' => array(
        'description' => "Page meta description",
        'type'        => 'text',
        'not null'    => false,
        'default'     => null,
      ),
    ],
    'foreign keys' => [
      'nid' => [
        'table'   => 'node',
        'columns' => ['node' => 'nid'],
      ],
    ],
    'primary key' => ['nid'],
  ];

  return $schema;
}

/**
 * Get constraints.
 */
function ucms_seo_install_constraints() {
  // Hopefully, this syntax should work on both PostgreSQL and MySQL although
  // this is pure coincidence, this is great for us.
  return [
    'ucms_seo_node' => [
      'ucms_seo_node_fk' => "ALTER TABLE {ucms_seo_node} ADD CONSTRAINT {ucms_seo_node_fk} FOREIGN KEY (nid) REFERENCES {node} (nid) ON DELETE CASCADE",
      'ucms_seo_alias_site_fk' => "ALTER TABLE {ucms_seo_alias} ADD CONSTRAINT {ucms_seo_alias_site_fk} FOREIGN KEY (site_id) REFERENCES {ucms_site} (id) ON DELETE CASCADE",
    ],
  ];
}

/**
 * Adds database constraints.
 */
function ucms_seo_install_schema_fix() {
  foreach (ucms_seo_install_constraints() as $table => $statements) {
    if (db_table_exists($table)) {
      foreach ($statements as $statement) {
        try {
          db_query($statement);
        } catch (\PDOException $e) {
          switch ($e->getCode()) {
            case 42710: // PostgreSQL constraint already exists
              continue;
            case 23000: // MySQL duplicate key in table
              continue;
            default:
              throw $e;
          }
        }
      }
    }
  }
}

/**
 * Removes database constraints.
 */
function ucms_seo_uninstall_schema_fix() {
  /*
  foreach (ucms_seo_install_constraints() as $table => $statements) {
    if (db_condition($table)) {
      foreach ($statements as $statement) {
        // @todo should rmeove contraint db_query($statement);
      }
    }
  }
   */
}

/**
 * Set weight so that ucms_seo pass after ucms_site in hook_node_save().
 */
function ucms_seo_install_set_weight() {

  $weight = db_select('system', 's')
    ->fields('s', ['weight'])
    ->condition('name', 'ucms_site', '=')
    ->execute()
    ->fetchField()
  ;

  db_update('system')
    ->fields(['weight' => $weight + 1])
    ->condition('name', 'ucms_seo', '=')
    ->execute()
  ;
}

/**
 * Implements hook_install().
 */
function ucms_seo_install() {
  ucms_seo_install_schema_fix();
  ucms_seo_install_set_weight();
}

/**
 * Implements hook_uninstall().
 */
function ucms_seo_uninstall() {
  ucms_seo_uninstall_schema_fix();
}

/**
 * Adds the missing {ucms_seo_alias}.site_id column.
 */
function ucms_seo_update_7001() {
  if (!db_field_exists('ucms_seo_alias', 'site_id')) {
    db_add_field('ucms_seo_alias', 'site_id', [
      'description' => "Site identifier this alias belongs to",
      'type'        => 'int',
      'unsigned'    => true,
      'not null'    => true,
    ]);
  }
}

/**
 * Adds missing database contraints.
 *
 * Weird thing is, with MySQL, when adding the field and settings contraints
 * during the same transaction, it seems to fail due to failing constraint, but
 * if you do it in two transactions, it works.
 */
function ucms_seo_update_7002() {
  ucms_seo_install_schema_fix();
}

/**
 * Sets the ucms_seo_alias.site_id column as nullable.
 */
function ucms_seo_update_7003() {

  try {
    db_query("ALTER TABLE {ucms_seo_alias} DROP FOREIGN KEY {ucms_seo_alias_site_fk};");
  } catch (PDOException $e) {}

  if (db_field_exists('ucms_seo_alias', 'site_id')) {
    db_drop_field('ucms_seo_alias', 'site_id');
  }

  db_add_field('ucms_seo_alias', 'site_id', [
    'description' => "Site identifier this alias belongs to",
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => false,
    'default'     => null,
  ]);
}

/**
 * Adds missing database columns.
 */
function ucms_seo_update_7005() {
  if (!db_field_exists('ucms_seo_node', 'meta_title')) {
    db_add_field('ucms_seo_node', 'meta_title', [
      'description' => "Page meta title page",
      'type'        => 'varchar',
      'length'      => 255,
      'not null'    => false,
      'default'     => null,
    ]);
  }
  if (!db_field_exists('ucms_seo_node', 'meta_description')) {
    db_add_field('ucms_seo_node', 'meta_description', [
      'description' => "Page meta description",
      'type'        => 'text',
      'not null'    => false,
      'default'     => null,
    ]);
  }
}

/**
 * Adds missing database columns.
 */
function ucms_seo_update_7008() {
  if (!db_field_exists('ucms_seo_alias', 'priority')) {
    db_add_field('ucms_seo_alias', 'priority', [
      'description' => "Defines a priority order for alias selection",
      'type'        => 'int',
      'not null'    => true,
      'default'     => 0,
    ]);
  }
  db_query("DELETE FROM {ucms_seo_alias} WHERE site_id IS NULL");
  db_change_field('ucms_seo_alias', 'site_id', 'site_id', [
    'description' => "Site identifier this alias belongs to",
    'type'        => 'int',
    'unsigned'    => true,
    'not null'    => true,
  ]);
}

/**
 * Restablishes the database contraints.
 */
function ucms_seo_update_7010() {
  db_add_unique_key('ucms_seo_alias', 'uk_ucms_seo_alias_site', ['alias', 'site_id']);
  ucms_seo_install_schema_fix();
}

/**
 * Fix module weight.
 */
function ucms_seo_update_7011() {
  ucms_seo_install_set_weight();
}

/**
 * Removes some tables.
 */
function ucms_seo_update_7014() {
  if (db_table_exists('ucms_seo_deadlinks_tracking')) {
    db_drop_table('ucms_seo_deadlinks_tracking');
  }
}
