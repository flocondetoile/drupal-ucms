<?php
/**
 * @file
 * UCMS - Site context and management.
 *
 * @todo
 *   - Implement variables overloading for site: name, home
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

use MakinaCorpus\Ucms\Site\Access;
use MakinaCorpus\Ucms\Site\EventDispatcher\SiteEvent;
use MakinaCorpus\Ucms\Site\Site;
use MakinaCorpus\Ucms\Site\SiteState;

/**
 * Implements hook_menu().
 */
function ucms_site_menu() {
  $items = [];

  $items['admin/dashboard/site'] = [
    'title'             => "Sites",
    'page callback'     => 'ucms_site_dashboard_site_list_all',
    'access arguments'  => [Access::PERM_SITE_DASHBOARD_ACCESS],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/all'] = [
    'title'             => "All sites",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/dashboard/site/mine'] = [
    'title'             => "My sites",
    'page callback'     => 'ucms_site_dashboard_site_list_mine',
    'access arguments'  => [Access::PERM_SITE_DASHBOARD_ACCESS],
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/archive'] = [
    'title'             => "Archives",
    'page callback'     => 'ucms_site_dashboard_site_list_archive',
    'access arguments'  => [Access::PERM_SITE_DASHBOARD_ACCESS],
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 100,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/request'] = [
    'title'             => "Request new site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteRequest'],
    'access arguments'  => [Access::PERM_SITE_REQUEST],
    'type'              => MENU_NORMAL_ITEM,
  ];

  $items['admin/dashboard/site/%ucms_site'] = [
    'title callback'    => 'ucms_site_menu_item_title',
    'title arguments'   => [3],
    'page callback'     => 'ucms_site_dashboard_site_page_view',
    'page arguments'    => [3],
    'access callback'   => 'ucms_site_menu_access_overview',
    'access arguments'  => [3],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/view'] = [
    'title'             => "Details",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/dashboard/site/%ucms_site/log'] = [
    'title'             => "Log",
    'page callback'     => 'ucms_site_dashboard_site_page_log',
    'page arguments'    => [3],
    'access callback'   => 'ucms_site_menu_access_overview',
    'access arguments'  => [3],
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/edit'] = [
    'title'             => "Site edit",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteEdit', 3],
    'access callback'   => 'ucms_site_menu_access_manage',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/delete'] = [
    'title'             => "Site edit",
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['ucms_site_dashboard_site_delete_form', 3],
    'access callback'   => 'ucms_site_menu_access_manage',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/switch/%'] = [
    'title'             => "Switch site state",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\SiteSwitch', 3, 5],
    'access callback'   => 'ucms_site_menu_access_switch',
    'access arguments'  => [3, 5],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster'] = [
    'title'             => "Users",
    'page callback'     => 'ucms_site_dashboard_site_page_webmasters',
    'page arguments'    => [3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'ucms_site.dashboard.inc',
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/add-existing'] = [
    'title'             => "Add an existing user",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterAddExisting', 3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/add-new'] = [
    'title'             => "Create a new webmaster or contributor",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterAddNew', 3],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/promote'] = [
    'title'             => "Promote as webmaster",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterPromote', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/demote'] = [
    'title'             => "Demote as contributor",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterDemote', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard/site/%ucms_site/webmaster/%user/delete'] = [
    'title'             => "Delete the user from this site",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\WebmasterDelete', 3, 5],
    'access callback'   => 'ucms_site_menu_access_webmasters',
    'access arguments'  => [3],
    'type'              => MENU_CALLBACK,
  ];

  $items['admin/dashboard/site/users-ac'] = [
    'title'             => "Users autocompletion",
    'page callback'     => 'ucms_site_dashboard_users_autocomplete',
    'access callback'   => true,
    'type'              => MENU_CALLBACK,
    'file'              => 'ucms_site.dashboard.inc',
  ];

  $items['node/%node/reference'] = [
    'title'             => "Reference this content",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Form\NodeReference', 1],
    'access callback'   => 'ucms_site_menu_access_reference',
    'access arguments'  => [1],
    'type'              => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  ];

  $items['admin/structure/site'] = [
    'title'             => "Site factory configuration",
    'description'       => "Global site configuration, such as allowed themes for sites",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Admin\SiteManagementForm'],
    'access arguments'  => ['administer site configuration'],
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/structure/site/global'] = [
    'title'             => "Settings",
    'type'              => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/structure/site/transitions'] = [
    'title'             => "Transitions",
    'page callback'     => 'sf_dic_page_form',
    'page arguments'    => ['MakinaCorpus\Ucms\Site\Admin\SiteStateTransitionForm'],
    'access arguments'  => ['administer site configuration'],
    'type'              => MENU_LOCAL_TASK,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function ucms_site_permission() {
  return [
    Access::PERM_CONTENT_MANAGE_GLOBAL => [
      'title' => t("Manage global content"),
    ],
    Access::PERM_CONTENT_MANAGE_GROUP => [
      'title' => t("Manage group content"),
    ],
    Access::PERM_CONTENT_VIEW_ALL => [
      'title' => t("View all content no matter where it stands"),
    ],
    Access::PERM_CONTENT_VIEW_GLOBAL => [
      'title' => t("View global published content"),
    ],
    Access::PERM_CONTENT_VIEW_GROUP => [
      'title' => t("View group published content"),
    ],
    Access::PERM_SITE_REQUEST => [
      'title' => t("Request new site"),
    ],
    Access::PERM_SITE_DASHBOARD_ACCESS => [
      'title' => t("Access to site dashboard"),
    ],
    Access::PERM_SITE_MANAGE_ALL => [
      'title' => t("Manage all sites no matter their state is"),
    ],
    Access::PERM_SITE_VIEW_ALL => [
      'title' => t("View all sites no matter their state is"),
    ],
  ];
}

/**
 * Title callback for menu items.
 *
 * @param Site $site
 */
function ucms_site_menu_item_title(Site $site) {
  return $site->title_admin;
}

/**
 * Implements hook_theme().
 */
function ucms_site_theme() {
  return [
    'ucms_site_state_transition_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Get site manager service.
 *
 * @return \MakinaCorpus\Ucms\Site\SiteManager
 */
function ucms_site_manager() {
  return \Drupal::service('ucms_site.manager');
}

/**
 * Get site manager service.
 *
 * @return \MakinaCorpus\Ucms\Site\NodeDispatcher
 */
function ucms_site_node_dispatcher() {
  return \Drupal::service('ucms_site.node_dispatcher');
}

/**
 * Get node access helper.
 *
 * @return \MakinaCorpus\Ucms\Site\NodeAccessService
 */
function ucms_site_node_access_helper() {
  return \Drupal::service('ucms_site.node_access_helper');
}

/**
 * Menu helper.
 */
function ucms_site_load($id) {
  try {
    return ucms_site_manager()->getStorage()->findOne($id);
  } catch (\InvalidArgumentException $e) {
    return false;
  }
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_view($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanView($account, $site);
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_overview($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanOverview($account, $site);
}

/**
 * Menu helper.
 */
function ucms_site_menu_access_manage($site, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanManage($account, $site);
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_switch($site, $state, $account = null) {
  if (!$site instanceof Site) {
    return false;
  }
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanSwitch($account, $site, $state);
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_webmasters(Site $site, $account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return ucms_site_manager()->getAccess()->userCanManageWebmasters($account, $site);
}

/**
 * Menu access check helper.
 */
function ucms_site_menu_access_reference(NodeInterface $node, $account = null) {
  if (!$account) {
    $account = \Drupal::currentUser();
  }
  return $node->access('view', $account) && ucms_site_node_access_helper()->userCanReference($account, $node);
}

/**
 * Implements hook_boot().
 */
function ucms_site_boot() {

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }

  // hook_boot() is the perfect place to set any context long before anything
  // else get initialized (except locale).
  $manager = ucms_site_manager();

  if (!empty($_SERVER['HTTP_HOST'])) {
    if ($site = ucms_site_manager()->getStorage()->findByHostname($_SERVER['HTTP_HOST'])) {
      $manager->setContext($site);

      // This has to be done before drupal_path_initialize() which is run right
      // before the hook_init(), so this will be the one and only alteration
      // being done on hook_boot().
      if ($site->home_nid) {
        $GLOBALS['conf']['site_frontpage'] = 'node/' . $site->home_nid;
      } else {
        // We do need a fallback, else the dashboard module will hit us.
        $GLOBALS['conf']['site_frontpage'] = 'node';
      }

      // We have to fake menu_load_all() because Drupal attemps to load
      // everything no matter what happens, and this is the single and only
      // non-scalable function in the whole core menu handling, so let's just
      // bypass it.
      drupal_static('menu_load_all', $manager->getMenus($site));

    } else {
      $manager->dropContext();
    }
  } else {
    $manager->dropContext();
  }

  // @todo Else attempt to find another contextual information (GET parameter?)
  // in order to determine preview mode or not.
}

/**
 * Implements hook_module_implements_alter().
 */
function ucms_site_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'menu_site_status_alter':
      unset($implementations['user']);
      break;
  }
}

/**
 * Implements hook_menu_site_status_alter().
 */
function ucms_site_menu_site_status_alter(&$menu_site_status, $path) {

  $account = \Drupal::currentUser();

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  if (!ucms_site_manager()->hasContext()) {
    return; // Do not alter proper behavior on master.
  }

  // Allow SSO login when site is down.
  if ('sso/login' === current_path()) {
    $menu_site_status = MENU_SITE_ONLINE;
    return;
  }

  // Do not alter an already offline site.
  if (MENU_SITE_OFFLINE === $menu_site_status) {
    return;
  }

  $site = ucms_site_manager()->getContext();

  if (!$site) {
    return; // No site in context, nothing to check for.
  }
  if (SiteState::ON == $site->state) {
    return; // Normal runtime operation, nothing to do.
  }

  if (!ucms_site_manager()->getAccess()->userCanView($account, $site)) {
    $menu_site_status = MENU_SITE_OFFLINE;
    // State off means that the site is valid and up, but in maintainance mode,
    // case in which we should just set the maintainance mode and leave,
    // otherwise would mean that the site is neither ON nor OFF and does not
    // exist for the outside, so redirect to something that exists (the main
    // site). If we have nothing to redirect to, at least this code will
    // fallback on site being offline.
    if (SiteState::OFF != $site->state) {
      ucms_site_redirect_to_default();
    }
  }
}

/**
 * Is current site master.
 *
 * @return boolean
 */
function ucms_site_is_master() {
  return variable_get('ucms_site_master_hostname') === $_SERVER['HTTP_HOST'];
}

/**
 * Redirect to mater
 */
function ucms_site_redirect_to_master() {
  drupal_goto(($GLOBALS['is_https'] ? 'https' : 'http') . '://' .variable_get('ucms_site_master_hostname') . '/admin/dashboard');
}

/**
 * Redirect to mater
 */
function ucms_site_redirect_to_default() {
  if ($uri = variable_get('ucms_site.redirect.uri')) {
    drupal_goto($uri, [], variable_get('ucms_site.redirect.http_code', 307));
  }
}

/**
 * Implements hook_init().
 */
function ucms_site_init() {

  if (drupal_is_cli()) {
    return; // Make drush happy.
  }

  $manager = ucms_site_manager();

  // We might have some problems due to the fact that the site is determined
  // at hook_boot() time, for example, we cannot call the path_is_admin()
  // function because modules have not been invoked. Site is being set way
  // before at hook_boot() in order to ensure that everything actually using
  // this information until now does it right (they should only be revelant
  // for frontend anyway), but we have a chance right now to fix admin paths
  // and remove the site information right now.
  if ($manager->hasContext()) {
    // We avoid redirections on dashboard in case of POST requests
    // to allow layout management requests (AJAX)
    if ('node' !== arg(0) && 'node/add' !== substr(current_path(), 0, 8)  && path_is_admin(current_path())) {// && 'POST' !== $_SERVER['REQUEST_METHOD']) {
//      if (user_is_logged_in()) {
//        // Logged-in users should not 403 on sites, but go to dashboard instead.
//        ucms_site_redirect_to_master();
//      }
    } else {

      // Normal runtime, there is a context, and path is not admin.
      $site = $manager->getContext();

      if ($site->title) {
        $GLOBALS['conf']['site_name'] = $site->title;
      }

      // @todo other alterations here
    }
  } else if (user_is_logged_in() && !ucms_site_is_master()) {
    ucms_site_redirect_to_master(); // Site does not exists.
  }
}

/**
 * Implements hook_custom_theme().
 */
function ucms_site_custom_theme() {

  if (path_is_admin(current_path())) {
    // Because there is actually a few admin paths that are accessible from
    // the sites themselves (node add, edit and menu tree) we can't override
    // the theme when we are working in an admin path.
    return;
  }

  // This should be called way after the hook_init() run, so we are sure the
  // site has been rightly set, and if we are in admin site has been removed,
  // so if we have a site structure, we are 100% sure we are not in an admin
  // path.
  $site = ucms_site_manager()->getContext();

  if (!$site) {
    return;
  }
  if (!$site->theme) {
    return;
  }

  // This hook is actually the only one being called just after the path
  // initialization, and before any menu item is loaded, it's the right place
  // for finishing up our initialization.
  \Drupal::service('event_dispatcher')->dispatch('site:init', new SiteEvent($site));

  // Ensure the theme is enabled for security, Drupal won't do it for
  // you, you might experience surprises. There is sadly no shortcut
  // we have to iterate over the full list of themes.
  foreach (list_themes() as $name => $data) {
    if ($site->theme === $name && $data->status) {
      return $site->theme;
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function ucms_site_node_presave($node) {
  $dispatcher = ucms_site_node_dispatcher();
  if (empty($node->nid)) {
    $dispatcher->onPreInsert($node);
  } else {
    $dispatcher->onPreUpdate($node);
  }
  $dispatcher->onPreSave($node);
}

/**
 * Implements hook_node_load().
 */
function ucms_site_node_load($nodes, $types) {
  ucms_site_node_dispatcher()->onLoad($nodes);
}

/**
 * Implements hook_node_insert().
 */
function ucms_site_node_insert($node) {
  $dispatcher = ucms_site_node_dispatcher();
  $dispatcher->onInsert($node);
  $dispatcher->onSave($node);
}

/**
 * Implements hook_node_update().
 */
function ucms_site_node_update($node) {
  $dispatcher = ucms_site_node_dispatcher();
  $dispatcher->onUpdate($node);
  $dispatcher->onSave($node);
}

/**
 * Implements hook_node_delete().
 */
function ucms_site_node_delete($node) {
  ucms_site_node_dispatcher()->onDelete($node);
}

/**
 * Implements hook_node_access().
 */
function ucms_site_node_access($node, $op, $account) {
  return ucms_site_node_access_helper()->userCanAccess($account, $node, $op);
}

/**
 * Implements hook_node_access_records().
 */
function ucms_site_node_access_records($node) {
  return ucms_site_node_access_helper()->getNodeGrants($node);
}

/**
 * Implements hook_node_grants().
 */
function ucms_site_node_grants($account, $op) {
  return ucms_site_node_access_helper()->getUserGrants($account, $op);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * This is required in order for users that may bypass node access (UID 1 is
 * one of them) to have site content correctly isolated depending on context.
 */
function ucms_site_query_node_access_alter(QueryAlterableInterface $query) {

  $site = ucms_site_manager()->getContext();

  if (!$site) {
    return;
  }
  if (!$query instanceof SelectQueryInterface) {
    return;
  }
  if ($query->hasTag(Access::QUERY_TAG_CONTEXT_OPT_OUT)) {
    return;
  }

  /* @var $account AccountInterface */
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }


  // If no base table is specified explicitly, search for one.
  $nodeAlias = null;
  foreach ($query->getTables() as $alias => $table_info) {
    if (!($table_info instanceof SelectQueryInterface)) {
      // If the node table is in the query, it wins immediately.
      if ('node' === $table_info['table']) {
        $nodeAlias = $alias;
      }
    }
  }
  if (!$nodeAlias) {
    return;
  }

  // Where the magic happens.
  $query->join(
    'ucms_site_node',
    'access_sn',
    "access_sn.nid = " . $nodeAlias . ".nid AND access_sn.site_id = :access_sn_site_id",
    [':access_sn_site_id' => $site->getId()]
  );
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Implement site visibility access control for the admin UI, this is the only
 * query alteration for business purpose this module will ever do.
 */
function ucms_site_query_ucms_site_access_alter(QueryAlterableInterface $query) {

  if (!$query instanceof SelectQueryInterface) {
    return;
  }

  /* @var $account AccountInterface */
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  if ($account->hasPermission(Access::PERM_SITE_MANAGE_ALL) ||
      $account->hasPermission(Access::PERM_SITE_VIEW_ALL)
  ) {
    return;
  }

  $siteAlias    = null;
  $accessAlias  = null;

  // If no base table is specified explicitly, search for one.
  foreach ($query->getTables() as $alias => $table_info) {
    if (!($table_info instanceof SelectQueryInterface)) {
      // If the node table is in the query, it wins immediately.
      if ('ucms_site' === $table_info['table']) {
        $siteAlias = $alias;
      }
      if ('ucms_site_access' === $table_info['table']) {
        $accessAlias = $alias;
      }
    }
  }

  if (!$siteAlias && !$accessAlias) {
    return;
  }

  if (!$accessAlias) {
    $query->join(
      'ucms_site_access',
      'access_sa',
      "access_sa.site_id = " . $siteAlias . ".id AND access_sa.uid = :access_sa_uid",
      [':access_sa_uid' => $account->id()]
    );
  } else {
    $query->condition($accessAlias . '.uid', $account->id());
  }
}

/**
 * Render the state transition form.
 */
function theme_ucms_site_state_transition_form($variables) {
  $form = $variables['form'];

  $header = [''];
  $rows   = [];
  $map    = SiteState::getList();

  foreach (element_children($form['transitions']) as $k1) {
    $header[] = $map[$k1];
    $row = [];
    $row[] = ['data' => $map[$k1], 'header' => true];
    foreach (element_children($form['transitions'][$k1]) as $k2) {
      if ($k1 != $k2) {
        $row[] = drupal_render_children($form['transitions'][$k1][$k2]);
      } else {
        $row[] = ['data' => '<span class="text-muted">' . t("N/A") . '</span>', 'style' => 'text-align: center;'];
      }
    }
    $rows[] = $row;
  }

  return theme('table', ['header' => $header, 'rows' => $rows]) . drupal_render_children($form);
}
